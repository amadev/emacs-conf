#+STARTUP: content
* emacs
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/init.el :results silent
  :END:

** Глобальные функции
*** Запуск и внешний вид

Запускаю emacs из консоли скрина, при этом скрин наследует переменные
окружения, а именно ssh-agent, чтобы можно было нормально
пользоваться magit без ввода паролей для ssh.

Конфигурация создается через tangle всех исходников описанных ниже.
Часть конфигурации представлена монолитным куском, который я буду
обрабатывать и постепенно описывать.
Для создания файла org-babel-tangle c-c c-v c-t.

По умолчанию идет список пакетов от gnu http://elpa.gnu.org/packages/.
melpa.milkbox.net - модерируемый, с автосборками и фильтром.
marmalade-repo.org - не обновляется.
#+BEGIN_SRC elisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(setq is-macos (memq window-system '(mac ns)))
(setq mu4e-enabled nil)
(when is-macos
  (package-initialize)
  (setq mu4e-enabled nil))
#+END_SRC

Для меня удобнее, когда я вижу одно окно, не отвлекаясь на
дополнительные приложения. В один момент времени выполняю одну функцию.
Убираем лишние GUI-свистелки.

#+BEGIN_SRC elisp
(tooltip-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq ring-bell-function 'ignore)
#+END_SRC

Отключаю пригласительный экран и текст в скретч.

#+BEGIN_SRC elisp
(setq inhibit-startup-screen t
      initial-scratch-message nil)
#+END_SRC

#+BEGIN_SRC elisp
(setenv "LANG" "en_US.UTF-8")
(setq system-time-locale "C")
#+END_SRC

Размер шрифта, тема.
Другие темы warm-night, brutalist-dark, blackboard, clues, anti-zenburn.

#+BEGIN_SRC elisp
(set-face-attribute 'default nil :height 130)
(load-theme 'zenburn t)
(set-cursor-color "#909090")
#+END_SRC

Разбивать окна вертикально.

#+BEGIN_SRC elisp
;; may split a window horizontally only if it has at least this many columns
(setq split-width-threshold 270)
(setq split-height-threshold nil)
#+END_SRC

*** use-package

#+BEGIN_SRC elisp
(setq use-package-compute-statistics t)
#+END_SRC

*** helm

http://tuhdo.github.io/helm-intro.html

#+BEGIN_SRC elisp
(use-package helm
  :init
  (setq helm-split-window-in-side-p t)
  (setq helm-M-x-fuzzy-match t)
  (defun helm-old-ff (&optional no-op)
    (interactive)
    (call-interactively 'find-file))

  :bind
  (("C-x f" . helm-projectile)
   ("C-x C-f" . find-file-at-point)
   ("C-x C-b" . helm-mini)
   ("M-y" . helm-show-kill-ring)
   ("C-h SPC". helm-all-mark-rings)
   ([remap man] . helm-man-woman)
   ;; Fallback to old find-file mode for tramp.
   (:map helm-map
         ("C-f" . (lambda ()
                    (interactive)
                    (helm-quit-and-execute-action 'helm-old-ff))))))
#+END_SRC

*** History and backups
**** Comint history

#+BEGIN_SRC elisp
(use-package comint
  :config
  (setq
   comint-input-ring-size 200000
   comint-scroll-show-maximum-output t
   comint-input-ignoredups t
   comint-input-ring-separator "$$$\n"))
#+END_SRC

To write history manually just issue:
(comint-write-input-ring)
(comint-read-input-ring)

See https://oleksandrmanzyuk.wordpress.com/2011/10/23/a-persistent-command-history-in-emacs/.
#+BEGIN_SRC elisp
(defun turn-on-comint-history ()
  (let ((process (get-buffer-process (current-buffer))))
    (when process
      (setq comint-input-ring-file-name
            (format (with-home-dir ".emacs.d/history.d/%s-buffer-history")
                    (car (split-string (buffer-name (current-buffer)) "-"))))
      (comint-read-input-ring)
      (set-process-sentinel process #'comint-write-history-on-exit))))
#+END_SRC

#+BEGIN_SRC elisp
(defun comint-write-input-ring-before-output (str)
  (if str (comint-write-input-ring))
  str)

(add-hook 'comint-preoutput-filter-functions
          'comint-write-input-ring-before-output)
#+END_SRC

#+BEGIN_SRC elisp
(defun comint-write-history-on-exit (process event)
  (comint-write-input-ring)
  (let ((buf (process-buffer process)))
    (when (buffer-live-p buf)
      (with-current-buffer buf
        (insert (format "\nProcess %s %s" process event))))))
#+END_SRC

Enable comint history for the specific modes.

#+BEGIN_SRC elisp
(add-hook 'shell-mode-hook 'turn-on-comint-history)
(add-hook 'inferior-python-mode-hook 'turn-on-comint-history)
(add-hook 'inferior-emacs-lisp-mode-hook 'turn-on-comint-history)
#+END_SRC

Save history for comint buffers history on kill or Emacs closing.

#+BEGIN_SRC elisp
(require 'comint)
(add-hook 'kill-buffer-hook 'comint-write-input-ring)

(defun mapc-buffers (fn)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
            (funcall fn)))
        (buffer-list)))

(defun comint-write-input-ring-all-buffers ()
  (mapc-buffers 'comint-write-input-ring))

(add-hook 'kill-emacs-hook 'comint-write-input-ring-all-buffers)
#+END_SRC

Helm comint history.

#+BEGIN_SRC elisp
(defun shell-mode-custom-keys ()
  (local-set-key (kbd "M-r") 'helm-comint-input-ring))

(add-hook 'shell-mode-hook 'shell-mode-custom-keys)
#+END_SRC

**** Минибуфер

Работает автоматически, при загрузке emacs подгружается история.
Для просмотра истории helm-minibuffer-history.

#+BEGIN_SRC elisp
(setq savehist-file "~/.emacs.d/history.d/minibuffer-history")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

#+RESULTS:
| kill-ring | search-ring | regexp-search-ring |

**** Бекапы
Бекап создается при первом сохранении буфера.
Авто-сейв после 30 сек или 300 символов.
Сохраняемые файлы вынес в отдельную папку, чтобы не гадить в рабочей
директории. Используем версии бекапных файлов и делаем бекапы файлов,
которые под контролем версий (git, svn).

#+BEGIN_SRC elisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
(setq version-control t)
(setq vc-make-backup-files t)
(setq delete-old-versions -1)
#+END_SRC

*** Поиск

По умолчанию запускаем поиск regexp.

#+BEGIN_SRC elisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

Для поиска символа под курсором можно воспользоваться
(isearch-forward-symbol-at-point) M-s .
либо дополнительной функцией в режиме поиска.

#+BEGIN_SRC elisp
(define-key isearch-mode-map (kbd "C-*")
  (lambda ()
    "Reset current isearch to a word-mode search of the word under point."
    (interactive)
    (setq isearch-word t
          isearch-string ""
          isearch-message "")
    (isearch-yank-string (word-at-point))))
#+END_SRC

Полезные сочетания в режиме поиска:
М-r - переключение regexp,
M-c - перечлючение case sensitive,
M-e - редактирование.

Из поска можно переключаться на замену: M-S %. Это удобно, что можно
подсветить фрагмент поиска и найти, то что нужно интерактивно, а затем
заменить.

В поиске можно использовать выражения, например:
:\([0-9]+\) → =\1

#+BEGIN_SRC elisp
(use-package anzu
   :ensure t
   :init (global-anzu-mode -1))
#+END_SRC

*** Удалениие пробелов вначале и конце строки.

#+BEGIN_SRC elisp
(defun chomp (str)
      "Chomp leading and tailing whitespace from STR."
      (while (string-match "\\`\n+\\|^\\s-+\\|\\s-+$\\|\n+\\'"
                           str)
        (setq str (replace-match "" t t str)))
      str)
#+END_SRC

*** Получение пароля происходит через консольную команду

[[file:system.org::*%D0%9F%D0%B0%D1%80%D0%BE%D0%BB%D0%B8][Пароли]]

#+BEGIN_SRC elisp
  (defun get-pass (name)
    (let ((cname (if (symbolp name) (symbol-name name) name)))
      (chomp (shell-command-to-string (concat "cpp " cname)))))
#+END_SRC

*** На клавиатуре сломался шифт и очень не хватало скобочек.

#+BEGIN_SRC elisp :tangle no

(define-key key-translation-map (kbd "9") (kbd "("))
(define-key key-translation-map (kbd "C-9") (kbd "9"))
(define-key key-translation-map (kbd "0") (kbd ")"))
(define-key key-translation-map (kbd "C-0") (kbd "0"))
(define-key key-translation-map (kbd "6") (kbd ":"))
(define-key key-translation-map (kbd "C-6") (kbd "6"))

#+END_SRC

#+RESULTS:
: 6

*** Пути от домашней папки и emacs.d.
#+BEGIN_SRC elisp
  (defun may-be-add-first-slash (path)
    (concat (if (string-match "^/" path) "" "/") path))

  (defun with-home-dir (path)
    (concat (expand-file-name "~") (may-be-add-first-slash path)))

  (defun with-emacs-dir (path)
    (with-home-dir (concat ".emacs.d" (may-be-add-first-slash path))))
#+END_SRC

*** Копирование имени файла текущего буфера в clipboard.
#+BEGIN_SRC elisp
  (defun copy-file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))

#+END_SRC

#+RESULTS:
: copy-file-name-to-clipboard
: copy-file-name-to-clipboard

*** Русская раскладка С-\

#+BEGIN_SRC elisp
(load-file "~/.emacs.d/cyrillic-dvorak.el")
(setq default-input-method "cyrillic-dvorak")
#+END_SRC

*** Шаблоны

Включаем возможность использования шаблонов везде.
Личные шаблоны храняться в file:///~/.emacs.d/snippets/.
Шаблоны могут использоваться как по ключу (key), так и по сочетанию
клавиш (binding), последнее полезно для оборачивания региона шаблоном.
yas-wrap-around-region включает такое поведение.

#+BEGIN_SRC elisp
(require 'yasnippet)
(yas-global-mode 1)
(setq yas-wrap-around-region t)
#+END_SRC

*** Браузер
#+BEGIN_SRC elisp
(setq browse-url-browser-function 'browse-url-generic
     browse-url-generic-program "firefox")

(when (eq system-type 'darwin)
  (setq browse-url-generic-program "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"))

#+END_SRC

*** Смена сплита буферов вертикальный/горизонтальный
#+BEGIN_SRC elisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

#+END_SRC

#+RESULTS:
: toggle-window-split

*** Смена содержимого окон
#+BEGIN_SRC elisp
  (defun swap-windows (arg)
    "Transpose the buffers shown in two windows."
    (interactive "p")
    (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
      (while (/= arg 0)
        (let ((this-win (window-buffer))
              (next-win (window-buffer (funcall selector))))
          (set-window-buffer (selected-window) next-win)
          (set-window-buffer (funcall selector) this-win)
          (select-window (funcall selector)))
        (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

#+END_SRC

*** Аккорды

Назначаем сочетания символов на часто используемые функции.
#+BEGIN_SRC elisp
(require 'key-chord)
(key-chord-mode 1)
(key-chord-define-global "yy" 'ack)
(key-chord-define-global "jj" 'ace-jump-mode)
(key-chord-define-global "hh" 'magit-status)
#+END_SRC

*** Работа c unicode
Часто используемые символы удобно смотреть:
http://xahlee.info/comp/unicode_index.html
http://www.unexpected-vortices.com/doc-notes/some-common-unicode-characters.html
Вставка c-x 8 ret.

*** Spell checking

Для проверки можно использовать flyspell-region или ispell-region,
также можно влючить проверку для mode через mode-hook (flyspell-mode).

http://endlessparentheses.com/ispell-and-org-mode.html

M-$ - исправление первого слова с ошибкой после курсора.
В сессии исправления можно принять текущее слова (a/A),

добавить в личный словарь (i).

Переключение словаря - ispell-change-dictionary.

*** Magit for project

#+BEGIN_SRC elisp
(use-package magit
  :ensure t)

(defun magit-nova ()
  (interactive)
  (let ((buffer "magit: nova"))
    (if (get-buffer buffer)
	(switch-to-buffer "magit: nova")
      (magit-status "~/m/nova"))))

(global-set-key (kbd "C-; n") 'magit-nova)
#+END_SRC

*** defaults

#+BEGIN_SRC elisp
(require 'smex)
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

(require 'saveplace)
(setq-default save-place t)

(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)

(use-package ace-window
  :ensure t
  :init (global-set-key [remap other-window] 'ace-window))

(fset 'yes-or-no-p 'y-or-n-p)

(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)

(global-set-key (kbd "M-n") 'delete-indentation)

(show-paren-mode 1)

;; show buffer file path or buffer name
(setq frame-title-format '(buffer-file-name "emacs %f" ("emacs %b")))

;; NO TABS, spaces only
(setq-default indent-tabs-mode nil)
(setq tab-width 4)

(setq find-program "find")

(setq x-select-enable-clipboard t
      x-select-enable-primary t
      save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      save-place-file (concat user-emacs-directory "places")
      Info-additional-directory-list '("/usr/share/info/emacs-snapshot/" "/usr/local/share/info"))

(setq tramp-default-method "ssh")

(use-package ack
  :ensure t
  :init (setq
         ack-defaults-function 'ack-legacy-defaults
         ack-command "ag -i --nogroup --nocolor ")
  :config (defalias 'grep 'ack))

(setq grep-command "ag -i --nogroup --nocolor ")

(require 'multiple-cursors)
(require 'mark-multiple)
(require 'inline-string-rectangle)

(defun fc-eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(display-time-mode t)

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(global-set-key (kbd "C-w") 'clipboard-kill-region)
(global-set-key (kbd "M-w") 'clipboard-kill-ring-save)
(global-set-key (kbd "C-y") 'clipboard-yank)
(global-set-key (kbd "C-x r t") 'inline-string-rectangle)
(global-set-key (kbd "C-<") 'mark-previous-like-this)
(global-set-key (kbd "C->") 'mark-next-like-this)
;; like the other two, but takes an argument (negative is previous)
(global-set-key (kbd "C-M-m") 'mark-more-like-this)

(custom-set-faces
 '(which-func ((t (:foreground "#b680b1" :weight bold))))
 '(chess-ics1-black-face ((t (:foreground "dim gray" :weight bold))))
 '(chess-ics1-white-face ((t (:foreground "chocolate" :weight bold))))
 '(secondary-selection ((t (:background "olive drab")))))

(put 'narrow-to-region 'disabled nil)
(put 'downcase-region 'disabled nil)

(setq helm-locate-project-list '("~/m/nova"))

(setq ix-user "amadev"
      ix-token (get-pass "ix.io"))

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
(setq fill-column 80)

(setq create-lockfiles nil)
#+END_SRC

*** text

#+BEGIN_SRC elisp
(defun rows2one (start end)
  (interactive "r")
  (save-restriction
    (narrow-to-region start end)
    (goto-char (point-min))
    (replace-regexp "^" "'")
    (goto-char (point-min))
    (replace-regexp "$" "',")
    (goto-char (point-min))
    (while (search-forward "\n" nil t) (replace-match " " nil t))
    (move-end-of-line)
    ))

(defun pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this. The function inserts linebreaks to separate tags that have
nothing but whitespace between them. It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
    (goto-char begin)
    (while (search-forward-regexp "\>[ \\t]*\<" nil t)
      (backward-char) (insert "\n") (setq end (1+ end)))
    (indent-region begin end))
  (message "Ah, much better!"))

(defun duplicate-line(arg)
  "Duplicate current line, leaving point in lower line."
  (interactive "*p")

  ;; save the point for undo
  (setq buffer-undo-list (cons (point) buffer-undo-list))

  ;; local variables for start and end of line
  (let ((bol (save-excursion (beginning-of-line) (point)))
        eol)
    (save-excursion

      ;; don't use forward-line for this, because you would have
      ;; to check whether you are at the end of the buffer
      (end-of-line)
      (setq eol (point))

      ;; store the line and disable the recording of undo information
      (let ((line (buffer-substring bol eol))
            (buffer-undo-list t)
            (count arg))
        ;; insert the line arg times
        (while (> count 0)
          (newline)         ;; because there is no newline in 'line'
          (insert line)
          (setq count (1- count)))
        )

      ;; create the undo information
      (setq buffer-undo-list (cons (cons eol (point)) buffer-undo-list)))
    ) ; end-of-let

  ;; put the point in the lowest line and return
  (next-line arg))

(global-set-key (kbd "C-c l") 'duplicate-line)

(defvar current-date-time-format "%Y-%m-%dT%T%z"
  "Format of date to insert with `insert-current-date-time' func
See help of `format-time-string' for possible replacements")

(defvar current-time-format "%H:%M:%S%z"
  "Format of date to insert with `insert-current-time' func.
Note the weekly scope of the command's precision.")

(defun insert-current-date-time ()
  "insert the current date and time into current buffer.
Uses `current-date-time-format' for the formatting the date/time."
       (interactive)
       (insert (format-time-string current-date-time-format (current-time))))

(defun insert-current-date ()
  "insert the current date and time into current buffer.
Uses `current-date-time-format' for the formatting the date/time."
       (interactive)
       (insert (format-time-string "%Y-%m-%d" (current-time))))

(defun insert-current-time ()
  "insert the current time (1-week scope) into the current buffer."
       (interactive)
       (insert (format-time-string current-time-format (current-time))))

(defun sentence-from-func-name-in-string (func-name)
  (let ((splitted-fn (split-string func-name "_")))
    (setf (first splitted-fn) (capitalize (first splitted-fn)))
    (concat (mapconcat 'identity splitted-fn " ") "."))
  )

(defun sentence-from-func-name (start end)
  (interactive "r")
  (let ((result
         (sentence-from-func-name-in-string
          (buffer-substring-no-properties start end))))
    (save-excursion
      (delete-region start end)
      (goto-char start)
      (insert result))))
#+END_SRC

*** prog

#+BEGIN_SRC elisp
(defun my-prog-mode-hook ()
  (setq whitespace-style '(face lines-tail trailing)
        whitespace-line-column 79)
  (whitespace-mode t)
  (which-function-mode -1)
  (idle-highlight-mode t)
  (make-local-variable 'column-number-mode)
  (column-number-mode t)
  (hl-line-mode t)
  (add-to-list 'write-file-functions 'delete-trailing-whitespace))

(add-hook  'prog-mode-hook 'my-prog-mode-hook)
#+END_SRC

*** Макросы

kmacro-name-last-macro
insert-kbd-macro

#+BEGIN_SRC elisp
(fset 'convert_shell_env_to_emacs
      (lambda (&optional arg)
        "Keyboard macro."
        (interactive "p")
        (kmacro-exec-ring-item
         (quote ([40 4 115 101 116 101 110 118 32 34 4 19 61 return backspace 34 32 34 4 5 34 41 14 1] 0 "%d")) arg)))

(fset 'pytest-args-from-test-name
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([134217765 46 return 47 return 33 backspace 32 45 107 32 18 47 return 67108896 19 32 23 2 2 2 23 46 112 121 5] 0 "%d") arg)))

(fset 'create-a-drill
   (kmacro-lambda-form [?* ?* ?* ?* backspace ?  ?\C-s ?  ?- ?  return backspace backspace backspace return backspace backspace backspace backspace ?* ?* ?* ?* ?  ?a ?n ?s ?w ?e ?r ?  backspace return backspace backspace backspace backspace backspace ?\C-p ?\C-p ?\C-c ?\C-q ?d ?r ?i ?l ?l return ?\C-e return backspace backspace backspace backspace ?t ?r ?a ?n ?s ?l ?a ?t ?e ?\C-n ?\C-n ?\C-n ?\C-a] 0 "%d"))
#+END_SRC

*** Replace multiple empty lines with a single one

#+BEGIN_SRC elisp
(defun single-lines-only ()
  "replace multiple blank lines with a single one"
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward "\\(^\\s-*$\\)\n" nil t)
    (replace-match "\n")
    (forward-char 1)))
#+END_SRC

*** Export presentations to site

#+BEGIN_SRC elisp
(require 'ox-reveal)
(defun my-export ()
  (interactive)
  (save-current-buffer
    (let ((org-reveal-width 1920)
          (org-reveal-height 1080))
     (set-buffer "scheduler.org")
     (org-reveal-export-to-html)))
  (shell-command-to-string "scp -r ~/org/scheduler amadev:~/www/docs/")
  (shell-command-to-string "scp ~/org/scheduler.html amadev:~/www/docs/")
  (shell-command-to-string "scp ~/org/custom.css amadev:~/www/docs/reveal.js/css/")
  (shell-command-to-string "rm ~/org/scheduler.html"))
#+END_SRC

*** Delete buffes by name

Using ibuffer it can be done with marking buffers by name with '% n'
and press 'D' after that.

*** Color codes

#+BEGIN_SRC elisp
(use-package ansi-color
  :init
  (defun display-ansi-colors ()
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max))))
#+END_SRC

*** git-link

#+BEGIN_SRC elisp
(use-package git-link
  :config
  (defun git-link-mcp (hostname dirname filename branch commit start end)
    (format "https://gerrit.mcp.mirantis.com/gitweb?p=%s.git;a=blob;f=%s;hb=refs/heads/%s%s"
	    dirname
            filename
            branch
	    (when start
              (concat "#"
                      (if end
                          (format "l%s-l%s" start end)
                        (format "l%s" start))))))

  (add-to-list 'git-link-remote-alist '("gerrit.mcp.mirantis.net" git-link-mcp))

  (defun git-link-openstack (hostname dirname filename branch commit start end)
    (format "https://git.openstack.org/cgit/%s/tree/%s?h=refs/heads/%s%s"
	    dirname
            filename
            branch
	    (when start
              (concat "#"
                      (if end
                          (format "n%s-n%s" start end)
                        (format "n%s" start))))))

  (defun git-link-openstack-github (hostname dirname filename branch commit start end)
    (funcall 'git-link-github "github.com" dirname filename branch commit start end))

  (defun git-link-commit-openstack-github (hostname dirname commit)
    (funcall 'git-link-commit-github "github.com" dirname commit))

  ;; (add-to-list 'git-link-remote-alist '("review.openstack.org" git-link-openstack))
  (add-to-list 'git-link-remote-alist '("review.openstack.org" git-link-openstack-github))
  (add-to-list 'git-link-commit-remote-alist '("review.openstack.org" git-link-commit-openstack-github))
  )
#+END_SRC

*** Script wrappers

#+BEGIN_SRC elisp
(defun run-mirantis-vpn ()
  (interactive)
  (start-process "mirantis-vpn" "mirantis-vpn-buffer" "/home/amadev/bin/run_mirantis_vpn"))

(defun run-proxy ()
  (interactive)
  (start-process "proxy" "proxy-buffer" "/home/amadev/bin/run_proxy"))
#+END_SRC

*** Send region to comint buffer

Send buffer string to the shell specified by name in
target-shell-session. It could be defined as file local variable:

# Local Variables:
# target-shell-session: shell-default
# End:

#+BEGIN_SRC elisp
(require 'subr-x)

(make-variable-buffer-local
 (defvar target-shell-session "shell-default"
   "Name of session buffer for sending comands from sh-send-mode"))

(defun send-current-paragraph-or-region (&optional step cmd)
  (interactive ())

  (let* ((pbuf (get-buffer target-shell-session))
         (proc (get-buffer-process pbuf))
         min max command)
    (if (use-region-p)
        (setq min (region-beginning)
              max (region-end))
      (setq min (save-excursion (backward-paragraph) (point))
            max (save-excursion (re-search-forward "\n[\t\n ]*\n+" nil "NOERROR") (point))))
    (setq command (if cmd
                      cmd
                    (concat (string-trim (buffer-substring min max)) "\n")))
    ;; (message "sending '%s'  to '%s'" command target-shell-session)
    (if (and (derived-mode-p 'org-mode) (string-prefix-p "- [" (thing-at-point 'line t)))
        (org-ctrl-c-ctrl-c)
        (progn (with-current-buffer pbuf
           (goto-char (process-mark proc))
           (insert command)
           (comint-send-input))
         (display-buffer (process-buffer proc) t)
         (when step
           (goto-char max)
           (next-line))))))

(defun send-current-paragraph-or-region-and-step ()
  (interactive)
  (send-current-paragraph-or-region t))

(defun switch-to-process-buffer ()
  (interactive)
  (pop-to-buffer (get-buffer target-shell-session) t))

(defun sh-set-to-current-dir ()
  (interactive)
  (send-current-paragraph-or-region nil (concat "cd " default-directory)))

(define-minor-mode sh-send-mode
  "Send a paragraph or marked string to the shell buffer."
  :lighter " ss"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "C-c C-c") 'send-current-paragraph-or-region-and-step)
            (define-key map (kbd "C-c C-z") 'switch-to-process-buffer)
            map))

(add-hook 'sh-mode-hook 'sh-send-mode)
(add-hook 'sql-mode-hook 'sh-send-mode)
(add-hook 'clojure-mode-hook 'sh-send-mode)
(add-hook 'org-mode-hook 'sh-send-mode)
#+END_SRC

*** Smartparens

Example config: https://github.com/Fuco1/.emacs.d/blob/master/files/smartparens.el

#+BEGIN_SRC elisp
(use-package smartparens-config
  :ensure smartparens
  :init (setq sp-base-key-bindings 'paredit)
  :config (progn
            (show-smartparens-global-mode t))
  :bind
  (:map smartparens-mode-map
        ("C-<right>" . sp-forward-slurp-sexp)
        ("C-<left>" . sp-forward-barf-sexp)
        ("C-c <left>" . sp-backward-slurp-sexp)
        ("C-c <right>" . sp-backward-barf-sexp)
        ("C-M-f" . sp-forward-sexp)
        ("C-M-b" . sp-backward-sexp)
        ("M-r" . sp-raise-sexp)
        ))

(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
(add-hook 'cider-repl-mode-hook 'turn-on-smartparens-strict-mode)
#+END_SRC

*** Shell track current dir

#+BEGIN_SRC elisp
  (defun shell-procfs-dirtrack (str)
    (prog1 str
      (when (string-match comint-prompt-regexp str)
        (let ((directory (file-symlink-p
                          (format "/proc/%s/cwd"
                                  (process-id
                                   (get-buffer-process
                                    (current-buffer)))))))
          (when (file-directory-p directory)
            (cd directory))))))

  (define-minor-mode shell-procfs-dirtrack-mode
    "Track shell directory by inspecting procfs."
    nil nil nil
    (cond (shell-procfs-dirtrack-mode
           (when (bound-and-true-p shell-dirtrack-mode)
             (shell-dirtrack-mode 0))
           (when (bound-and-true-p dirtrack-mode)
             (dirtrack-mode 0))
           (add-hook 'comint-preoutput-filter-functions
                     'shell-procfs-dirtrack nil t))
          (t
           (remove-hook 'comint-preoutput-filter-functions
                        'shell-procfs-dirtrack t))))
#+END_SRC

** Работа с файлами dired

Для просмотра содержимого папки можно C-x C-f C-f,
либо C-x d, для второго варианта можно указать glob-шаблон,
чтобы отфильтровать нужное, например *.org.

Сортировка по дате/алфавиту - s.
Задание переключателей для ls - C-u s, можно указать h, чтобы видеть
размеры в человекопонятном виде.

Режим wdired позволяет изменять имена файлов, как текст C-x C-q.

Пометка файлов через regexp - % m.
Выделить все - * s.
Инвертировать выделение - * t.

Скопировать, переместить, удалить - C, R, D.

Скопировать полный путь до файла C-u 0 w.

Настройки отображения dired по умолчанию.
Показываем все, сортируем по дате (новые внизу), но сначала директории.

#+BEGIN_SRC elisp
(setq dired-listing-switches "-altrh  --group-directories-first")
#+END_SRC

Использовать lisp-версию ls для Mac.

#+BEGIN_SRC elisp
(when (eq system-type 'darwin)
  (require 'ls-lisp)
  (setq ls-lisp-use-insert-directory-program nil))
#+END_SRC

#+BEGIN_SRC elisp
(use-package dired-subtree :ensure t
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))

(use-package dired-git-info
    :ensure t
    :bind (:map dired-mode-map
                (")" . dired-git-info-mode)))
#+END_SRC

** erc

echo "machine irc.freenode.net login avolkov port 6697 password $(cpp.sh irc.freenode.net)" >> \
   ~/.authinfo
echo "machine miracloud.irc.slack.com login andrey.volkov port 6667 password $(cpp.sh mirantis_irc)" >> \
   ~/.authinfo

Возможно, файл сильно кешируется, т.к. после обновления файла из запущенного
emacs данные не подхватывались, решилось перезапуском.

#+BEGIN_SRC elisp
(defun start-ircs ()
  (interactive)
  (erc-tls :server "irc.freenode.net" :port 6697
           :nick "avolkov" :full-name "Andrey Volkov"))

(require 'erc-join)
(erc-autojoin-mode 1)

(setq erc-autojoin-channels-alist
      '(
        ("freenode.net" "#openstack-nova" "#openstack-placement")
        ))

(setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                "324" "329" "332" "333" "353" "477"))

(setq erc-format-query-as-channel-p t
      erc-track-priority-faces-only 'all
      erc-track-faces-priority-list '(erc-error-face
                                      erc-current-nick-face
                                      erc-keyword-face
                                      erc-nick-msg-face
                                      erc-direct-msg-face
                                      erc-dangerous-host-face
                                      erc-notice-face
                                      erc-prompt-face))

(require 'erc-log)
(setq erc-log-channels-directory "~/.emacs.d/erc/logs/")
(erc-log-enable)

(setq erc-save-buffer-on-part nil
      erc-save-queries-on-quit nil
      erc-log-write-after-send t
      erc-log-write-after-insert t)
#+END_SRC

#+BEGIN_SRC elisp
  (setq erc-important-channels
        '("#quotas" "#emacs" "#mos-ere" "#mos-nova" "#mos-nova-flood-ru"))

  (defun list-erc-joined-channels ()
    "Return all the channels you're in as a list. This does not include queries."
    (save-excursion
      ;; need to get out of ERC mode so we can have *all* channels returned
      (set-buffer "*scratch*")
      (mapcar #'(lambda (chanbuf)
                  (with-current-buffer chanbuf (erc-default-target)))
              (erc-channel-list erc-process))))

  (defun list-erc-tracked-channels (excluded)
    (remove-if #'(lambda (row) (member row excluded)) (list-erc-joined-channels)))

  (defun enable-erc-notification-for-important-channels-only ()
    (interactive)
    (setq erc-track-priority-faces-only (list-erc-tracked-channels erc-important-channels))
    (message "Enable notifications for channels %s" erc-important-channels))

  (defun disable-non-priority-notification ()
    (interactive)
    (setq erc-track-priority-faces-only 'all)
    (message "Notifications from all channels are disabled"))

  (defun enable-all-notifications ()
    (interactive)
    (setq erc-track-priority-faces-only nil)
    (message "Notifications from all channels are enabled"))
#+END_SRC

** shell
*** Tramp

#+BEGIN_SRC elisp
(use-package tramp
  :config (add-to-list 'tramp-connection-properties
                       (list nil "session-timeout" nil)))
#+END_SRC

*** Shell management

Для удобства запуска новых консолей есть две функции:
- start-shell(buffer-name &optional cmd)
  Например: (start-shell "shell_nova" "cd ~/m/nova && vact")
- start-ssh (buffer-name host &optional cmd)
  Подключается к хосту, используя tramp, затем запускает shell.
  Для подключения к хосту можно использовать tramp, например:
  (start-ssh "shell_ctl" "fuel|sudo:fuel|ssh:ctl01")

Часто используемые shell добавляются в shell-alist и вызываются
через helm (c-; b).

#+BEGIN_SRC elisp
(defun read-shells-config (fname)
  (read (format "(%s)"
                (with-temp-buffer
                  (insert-file-contents fname)
                  (buffer-string)))))

(defun make-comint-directory-tracking-work-remotely ()
  "Add this to comint-mode-hook to make directory tracking work
    while sshed into a remote host, e.g. for remote shell buffers
    started in tramp. (This is a bug fix backported from Emacs 24:
    http://comments.gmane.org/gmane.emacs.bugs/39082"
  (set (make-local-variable 'comint-file-name-prefix)
       (or (file-remote-p default-directory) "")))

(add-hook 'comint-mode-hook 'make-comint-directory-tracking-work-remotely)

(defun shell-cd (cmd)
  (when (string-match "cd \\([^\n]+\\)" cmd)
    (cd (match-string 1 cmd))))

(defun start-local (buffer-name &optional cmd)
  (shell buffer-name)
  (when cmd
      (shell-cd cmd)
      (with-current-buffer buffer-name
        (shell-procfs-dirtrack-mode))
      (comint-send-string buffer-name (concat cmd "\n"))))

(defun start-ssh (buffer-name host &optional cmd)
  (find-file (format "/ssh:%s:" host))
  (shell buffer-name)
  (if cmd
      (comint-send-string buffer-name (concat cmd "\n"))))

(defun start-shell-buffer (buffer host cmd)
  (if host
      (start-ssh bf host cmd)
    (start-local bf cmd)))

(setq shelm-history nil)

(defun run-or-get-shell (name)
  (interactive
   (progn
     (setq shell-alist (read-shells-config "~/.emacs.d/shells.el"))
     (let ((name (helm-comp-read
                  "Select shell: "
                  (mapcar (lambda (item) (list (nth 0 item) (nth 0 item))) shell-alist)
                  :history 'shelm-history)))
       (if (listp name) name (list name)))))
  (let* ((opts (cadr (assoc name shell-alist)))
         (host (plist-get opts 'host))
         (cmd (or (plist-get opts 'cmd) "true"))
         (bf (concat "shell-" name)))
    (message "%s is choosen, cmd: %s, host: %s" name cmd host)
    (and
     (get-buffer bf)
     (not (get-buffer-process bf))
     (kill-buffer bf))
    (if (get-buffer bf)
        (switch-to-buffer bf)
      (start-shell-buffer bf host cmd))))

(global-set-key (kbd "C-; b") 'run-or-get-shell)
#+END_SRC

*** Run current file

Запуск текущего файла в compilation mode.

#+BEGIN_SRC elisp
(global-set-key (kbd "<f7>") 'run-current-file)

(defun run-current-file ()
      "Execute or compile the current file.
   For example, if the current buffer is the file x.pl,
   then it'll call “perl x.pl” in a shell.
   The file can be php, perl, python, ruby, javascript, bash, ocaml, java.
   File suffix is used to determine what program to run."
      (interactive)
      (let (extention-alist fname suffix progName cmdStr)
        (setq extention-alist ; a keyed list of file suffix to comand-line program to run
              '(
                ("php" . "php")
                ("pl" . "perl")
                ("py" . "python")
                ("rb" . "ruby")
                ("js" . "js")
                ("sh" . "bash")
                ("" . "bash")
                ("ml" . "ocaml")
                ("vbs" . "cscript")
                ("java" . "javac")
                ("go" . "go run")
                )
              )
        (setq fname (buffer-file-name))
        (setq suffix (file-name-extension fname))
        (setq progName (cdr (assoc suffix extention-alist)))
        (setq cmdStr (concat progName " \"" fname "\""))

        (if (string-equal suffix "el")
            (load-file fname)
          (if progName                  ; is not nil
              (progn
                (message "Running...")
                (compile (read-shell-command "Command: " cmdStr)))
            ;;(shell-command cmdStr))
            (message "No recognized program file suffix for this file.")
            ))))
#+END_SRC

*** Run tmp command

#+BEGIN_SRC elisp
  (defun tmp-command()
    (interactive)
    (comint-send-string "shell_placement" "~/m/python-openstackclient/.tox/py27/bin/pytest -vxlk TestSetInventory\n"))
  (global-set-key (kbd "<f8>") 'tmp-command)
#+END_SRC

*** Eshell

#+BEGIN_SRC elisp
;; for GNU Emacs 26.3
(defun eshell-mode-custom-keys ()
  (local-set-key (kbd "<f9>") 'helm-eshell-history)
  (local-set-key (kbd "M-r") 'helm-eshell-history))
(add-hook 'eshell-mode-hook 'eshell-mode-custom-keys)
;; for GNU Emacs 28.0.50
(require 'em-hist)

(setq helm-show-completion-display-function #'helm-show-completion-default-display-function)
(define-key eshell-hist-mode-map (kbd "M-r") 'helm-eshell-history)
#+END_SRC

** orgmode

Установка orgmode и его расширений.

#+BEGIN_SRC elisp
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
#+END_SRC

Устанавливаем org-plus-contrib, нужно обновлять в чистом emacs
или удалять файлы elc при ошибках компиляции.

Файлы с задачами.
#+BEGIN_SRC elisp
(setq my-org-dir (with-home-dir "org/"))
(setq org-agenda-files
      (mapcar
       #'(lambda (name) (concat my-org-dir name))
       '("task.org" "org-linkz/Linkz.org" "reference.org" "work-gcal.org" "book.org" "film.org" "att-log.org")))
#+END_SRC

#+RESULTS:
| /home/amadev/org/gtd.org | /home/amadev/org/office.org |

Refile targets where items from any list can be moved.
Most recent items should appear on top. It's more natural way to see recent items first. The same setup as in mail.
Done issues go to the bottom of the list. Can view it if needed.

#+BEGIN_SRC elisp
(defun refile-org-files ()
  (let ((files '("task.org" "reference.org" "book.org" "film.org")))
    (mapcar #'(lambda (x) (concat my-org-dir x)) files)))

(setq org-refile-targets '((refile-org-files . (:level . 2)))
      org-reverse-note-order t)
#+END_SRC

#+RESULTS:
: ((refile-org-files :level . 2))

Сочетание, для открытия агенды.
#+BEGIN_SRC elisp
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c i") 'org-store-link)
#+END_SRC

#+RESULTS:
: org-agenda

Mobile and web accessibility are resolved by https://org-web.org/.
All org files are synchronized to Dropbox w/o org-mobile.

*** org-mode latex

# export to latex
sudo apt-get install texlive-full

C-c C-x C-l runs the command org-preview-latex-fragment (need imagemagick)
C-c C-c on fomula - reset image
C-c C-x \ runs the command org-toggle-pretty-entities (display unicode values)

Increase font size for latex fragment preview.

#+BEGIN_SRC elisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.6))
#+END_SRC

See [[file:~/org/pdf-export.org]]

#+BEGIN_SRC elisp
(add-to-list
 'org-latex-classes
 '("nice-pdf-26" "\\documentclass[14pt,a4paper,hidelinks]{scrartcl}
\\usepackage[T1]{fontenc}
\\usepackage{fontspec}
\\usepackage{graphicx}
\\usepackage{hyperref}
\\usepackage{geometry}
\\usepackage{libertine}

\\geometry{a4paper, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}
\\pagestyle{empty}
\\title{}

         [NO-DEFAULT-PACKAGES]
         [PACKAGES]
         [EXTRA]
\\setcounter{secnumdepth}{0}
"
   ("\\subsection{%s}" . "\\subsection*{%s}")
   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
   ("\\paragraph{%s}" . "\\paragraph*{%s}")
   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(setq org-latex-pdf-process
      '("xelatex -interaction nonstopmode %f"
        "xelatex -interaction nonstopmode %f"))
#+END_SRC

http://emacs-fu.blogspot.com/2011/04/nice-looking-pdfs-with-org-mode-and.html

*** Захват сообщений

Шаблоны.

%? - пользовательский ввод.
%U - дата.
%a - указатель на файл, в котором находишься при захвате.
%i - активный регион.

#+BEGIN_SRC elisp
(setq my-task-file (concat my-org-dir "task.org"))
(setq my-bookmark-file (concat my-org-dir "bookmark.org"))
(setq org-capture-templates
      '(("i"
         "Inbox"
         entry
         (file+olp my-task-file "task" "inbox")
         "* TODO %?\n\nAdded: %U\n  %i\n")
        ("f"
         "Inbox with file link"
         entry
         (file+olp my-task-file "task" "inbox")
         "* TODO %?\n\nAdded: %U\n  %i\n%\n")
        ("b"
         "Bookmark"
         entry
         (file+olp my-bookmark-file "Bookmarks" "inbox")
         "* TODO %c %?\n\nAdded: %U\n  %i\n")
        ("m"
         "memorize"
         entry
         (file+olp "~/org/cards/english.org" "words")
         "* %i\t\t:drill:\n    Added: %U\n\n** answer\n\n%?\n")
        ("o" "Link capture" entry
         (file+headline "~/org/org-linkz/Linkz.org" "Catalog")
         "* TODO %a %U\n"
         :immediate-finish t)))

(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

#+RESULTS:
| i | Inbox | entry | (file+olp (concat my-org-dir task.org) task inbox) | * TODO %? |

*** babel

Добавляем языки.
#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((lisp . t)
   (plantuml . t)
   (shell . t)
   (lisp . t)
   (ditaa . t)
   (R . t)
   (python . t)
   (ruby . t)
   (sql . t)
   (dot . t)
   (C . t)
   (sqlite . t)
   (ledger . t)
   (gnuplot . t)))
#+END_SRC

Отключаем запрос на подтверждение выполнения.

#+BEGIN_SRC elisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

#+RESULTS:

Задаем приложение для обработки.

#+BEGIN_SRC elisp
  (setq org-plantuml-jar-path
        (expand-file-name "~/bin/plantuml.jar"))
  (setq org-ditaa-jar-path
        (expand-file-name "~/.emacs.d/bin/ditaa0_9.jar"))
  (setq org-babel-python-command "PYTHONPATH=$PYTHONPATH:~/files/prog python")
  (setq org-babel-sh-command "bash")
#+END_SRC

#+RESULTS:
: bash

Для заголовков можно указывать параметры через property или elisp.

Например:
\#+PROPERTY: header-args :session *my_python_session*
\#+PROPERTY: header-args+ :results silent
\#+PROPERTY: header-args+ :tangle yes
или
:header-args:SQL:  :cmdline -xxx :engine mysql

#+BEGIN_SRC elisp
  (setq org-babel-default-header-args:sh
        (cons '(:results . "scalar replace")
              (assq-delete-all :results org-babel-default-header-args)))
#+END_SRC

*** Время

#+BEGIN_SRC elisp
(defun bh/is-project-p-with-open-subtasks ()
  "Any task with a todo keyword subtask"
  (let ((has-subtask)
        (subtree-end (save-excursion (org-end-of-subtree t))))
    (save-excursion
      (forward-line 1)
      (while (and (not has-subtask)
                  (< (point) subtree-end)
                  (re-search-forward "^\*+ " subtree-end t))
        (when (and
               (member (org-get-todo-state) org-todo-keywords-1)
               (not (member (org-get-todo-state) org-done-keywords)))
          (setq has-subtask t))))
    has-subtask))

(defun bh/clock-in-to-started (kw)
  "Switch task from TODO or NEXT to STARTED when clocking in.
Skips capture tasks and tasks with subtasks"
  (if (and (member (org-get-todo-state) (list "TODO" "NEXT"))
           (not (and (boundp 'org-capture-mode) org-capture-mode))
           (not (bh/is-project-p-with-open-subtasks)))
      "STARTED"))

;; добавляет время закрытия таска
(setq org-log-done t)
;; Сохраняем историю подсчета времени между сессиями
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
;; Save clock data in the CLOCK drawer and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer "CLOCK")
;; Yes it's long... but more is better ;)
(setq org-clock-history-length 28)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change task state to NEXT when clocking in
(setq org-clock-in-switch-to-state (quote bh/clock-in-to-started))
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK" "CLOCK")))
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist (quote history))
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)
(setq org-deadline-warning-days 1)

(setq org-clock-mode-line-total 'current)
#+END_SRC

#+RESULTS:
: 1

Отображение clock-table в часах.

#+BEGIN_SRC elisp
  (setq org-time-clocksum-format
        '(:hours "%d"
          :require-hours t
          :minutes ":%02d"
          :require-minutes t))
#+END_SRC

*** Экспорт

(setq org-export-babel-evaluate nil)

*** Agenda

#+BEGIN_SRC elisp
  ;; (setq org-agenda-custom-commands
  ;;       '(("x" agenda)
  ;;         ("y" agenda*)
  ;;         ("w" todo "WAITING")
  ;;         ("W" todo-tree "WAITING")
  ;;         ("u" tags "+boss-urgent")
  ;;         ("v" tags-todo "+boss-urgent")
  ;;         ("U" tags-tree "+boss-urgent")
  ;;         ("f" occur-tree "\\<FIXME\\>")
  ;;         ("h" . "HOME+Name tags searches") ; description for "h" prefix
  ;;         ("hl" tags "+home+Lisa")
  ;;         ("hp" tags "+home+Peter")
  ;;         ("hk" tags "+home+Kim")))
  (setq org-agenda-custom-commands
        '(("tb" tags-todo "+BOOK")
          ("tr" tags-todo "+READ")
          ("tt" tags-todo "+TASK")
          ("tp" tags-todo "+PROJECT")
          ("tf" tags-todo "+FILM")))
#+END_SRC

*** Настройки блоков

#+BEGIN_SRC elisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t
      org-adapt-indentation nil)
#+END_SRC

*** github

#+BEGIN_SRC elisp
(defun org-remove-results-tag ()
  (interactive)
  (save-excursion
    (beginning-of-buffer)
    (let ((cnt 0))
      (while (search-forward "#+RESULTS:" nil t)
        (org-beginning-of-line)
        (org-kill-line)
        (org-kill-line)
        (incf cnt))
      (message "#+RESULTS: lines removed: %d" cnt))))

(defun org-convert-tables ()
  (interactive)
  (save-excursion
    (beginning-of-buffer)
    (let ((cnt 0))
      (while (search-forward "+---" nil t)
        (org-beginning-of-line)
        (org-table-convert)
        (incf cnt))
      (message "%d tables converted" cnt))))

(defun org-prepare-github ()
  (interactive)
  (org-remove-results-tag)
  (org-convert-tables))
#+END_SRC

*** Редактирование

#+BEGIN_SRC elisp
(use-package flyspell
  :if (not is-macos)
  :hook
    ((org-mode . flyspell-mode)
     (text-mode . flyspell-mode))
  :config
    (define-key flyspell-mode-map (kbd "C-;") nil))
#+END_SRC

*** org-drill

#+BEGIN_SRC elisp
(use-package org-drill
  :if nil
  :ensure t)
#+END_SRC

*** org-bookmarks

#+BEGIN_SRC elisp
(use-package org-protocol
  :init (setq org-html-validation-link nil
              org-protocol-default-template-key "o"))

(defun export-linkz-after-saved-file ()
  (if (string-match "Linkz.org" (buffer-file-name))
      (org-html-export-to-html)))

(add-hook 'after-save-hook 'export-linkz-after-saved-file)
#+END_SRC

Alternative via local vars

# Local variables:
# eval: (add-hook 'after-save-hook (lambda () (org-html-export-to-html)) t t)
# end:

** Почта

Для работы с почтой используется mu4e (http://www.djcbsoftware.nl/code/mu/mu4e/).
mu4e идет в составе индексатора mu, который устанавливается, как системный пакет.
file://~/Dropbox/mu_0.9.15-1_amd64.deb

lisp-файлы подключаются к emacs.
#+BEGIN_SRC elisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+END_SRC

Почта стягивается со всех аккаунтов в ~/Maildir с помощью offlineimap
и фильтруется imapfilter (общий конфиг для всех аккаунтов)
[[file:~/dotfiles/.offlineimaprc::%5Bgeneral%5D]]
Для каждого аккаунта используется конфиг imapfilter.
[[file:~/files/settings/.imapfilter/wolfanio.lua::timeout%20=%20120][wolfanio]]
#TODO в перерыве между фильтрацией и скачиванием нежелательные письма просачиваются

Возможно, для ускорения следует попробовать серверную обработку
http://kb.4rt.ru/mail/setup.

Запуск mu4e.
#+BEGIN_SRC elisp
(use-package mu4e
  :config
    (add-to-list 'mu4e-view-actions
      '("ViewInBrowser" . mu4e-action-view-in-browser) t)
    (add-to-list 'mu4e-headers-actions
      '("ViewInBrowser" . mu4e-action-view-in-browser) t)
    (add-to-list 'mu4e-bookmarks
      '("maildir:/wolfanio/INBOX or maildir:/mirantis/INBOX or maildir:/amadev/INBOX"  "Inbox"     ?i))
  :if mu4e-enabled
  :bind ("C-; m" . 'mu4e))
#+END_SRC

*** Общие настройки

Команда для скачивания почты.
#+BEGIN_SRC elisp
(setq mu4e-get-mail-command "true")
(setq mu4e-update-interval nil)
#+END_SRC

Преобразование html-писем в текст.
#+BEGIN_SRC elisp
(setq mu4e-html2text-command "html2text -utf8 -width 72")
#+END_SRC

Пароли для отправки почты храняться локально в require ~/.authinfo.
Формат:
machine smtp.gmail.com login EMAIL port 587 password *******

Отправляем почту через smtp, используя tls, без использования очереди.
#+BEGIN_SRC elisp
  (setq
   message-send-mail-function 'smtpmail-send-it
   smtpmail-stream-type 'starttls
   smtpmail-queue-mail  nil)
#+END_SRC

Сохранение ссылки на письмо.
#+BEGIN_SRC elisp
(use-package org-mu4e
  :if mu4e-enabled)
#+END_SRC

Всегда отображаем дату и время в заголовках.

#+BEGIN_SRC elisp
(setq mu4e-headers-fields '(
  (:date . 24)
  (:flags . 6)
  (:mailing-list . 10)
  (:from . 22)
  (:subject)))

(setq mu4e-headers-date-format "%x %T")
#+END_SRC

Скрываем сообщение об индексации.

#+BEGIN_SRC elisp
(setq mu4e-hide-index-messages t)
#+END_SRC

*** Настройки для accounts.
#+BEGIN_SRC elisp
(setq my-mu4e-account-alist
  '(("wolfanio"
     (mu4e-drafts-folder "/wolfanio/drafts")
     (mu4e-sent-folder   "/wolfanio/sent")
     (mu4e-trash-folder  "/wolfanio/trash")
     (mu4e-refile-folder "/wolfanio/archive")

     (user-mail-address "wolfanio@gmail.com")
     (user-full-name  "Andrey Volkov")
     (mu4e-compose-signature
      (concat
       "С уважением,\n"
       "Андрей Волков.\n\n"
       "mobile: +7(916) 86 88 942\n"
       "skype:  amadev_alt\n"
       "site:   http://amadev.ru/\n"))
     (smtpmail-smtp-server "smtp.gmail.com")
     (smtpmail-smtp-user "wolfanio@gmail.com")
     (smtpmail-smtp-service 587))
    ("mirantis"
     (mu4e-drafts-folder "/mirantis/drafts")
     (mu4e-sent-folder   "/mirantis/sent")
     (mu4e-trash-folder  "/mirantis/trash")
     (mu4e-refile-folder "/mirantis/archive")
     (user-mail-address "avolkov@mirantis.com")
     (user-full-name  "Andrey Volkov")
     (mu4e-compose-signature
      (concat
       "Thanks,\n\n"
       "Andrey Volkov,\n"
       "Software Engineer, Mirantis, Inc."))
     (smtpmail-smtp-server "smtp.gmail.com")
     (smtpmail-smtp-user "avolkov@mirantis.com")
     (smtpmail-smtp-service 587))
    ("amadev"
     (mu4e-drafts-folder "/amadev/drafts")
     (mu4e-sent-folder   "/amadev/sent")
     (mu4e-trash-folder  "/amadev/trash")
     (mu4e-refile-folder "/amadev/archive")
     (user-mail-address "m@amadev.ru")
     (user-full-name  "Andrey Volkov")
     (mu4e-compose-signature
      (concat
       "Thanks,\n\n"
       "Andrey Volkov,\n"
       "Software Engineer, Amadev, Inc."))
     (smtpmail-smtp-server "amadev.ru")
     (smtpmail-smtp-user "m")
     (smtpmail-smtp-service 587))))
#+END_SRC

#+RESULTS:
: my-mu4e-account-alist

Короткие ссылки для inbox.
#+BEGIN_SRC elisp
(setq mu4e-maildir-shortcuts
      '(("/wolfanio/INBOX" . ?w)
        ("/mirantis/INBOX" . ?m)))
#+END_SRC

*** Интерактивно выбираем account при создании письма.
#+BEGIN_SRC elisp
(defun my-mu4e-set-account ()
  "Set the account for composing a message."
  (let* ((account
          (if mu4e-compose-parent-message
              (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                (string-match "/\\(.*?\\)/" maildir)
                (match-string 1 maildir))
            (completing-read (format "Compose with account: (%s) "
                                     (mapconcat #'(lambda (var) (car var))
                                                my-mu4e-account-alist "/"))
                             (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                             nil t nil nil (caar my-mu4e-account-alist))))
         (account-vars (cdr (assoc account my-mu4e-account-alist))))
    (message "account: %s, account-vars: %s" account account-vars)
    (if account-vars
        (mapc #'(lambda (var)
                  (set (car var) (cadr var)))
              account-vars)
      (error "No email account found"))))

(setq mu4e-user-mail-address-list
      (mapcar (lambda (account) (cadr (assq 'user-mail-address account)))
              my-mu4e-account-alist))

(add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
#+END_SRC

*** При архивировании переносим в соответствующую папку, в зависимости от текущего maildir

#+BEGIN_SRC elisp
(setq mu4e-refile-folder
      (lambda (msg)
        (let* ((maildir (mu4e-message-field msg :maildir))
               (account (progn (string-match "/\\(.*?\\)/" maildir)
                               (match-string 1 maildir)))
               (refile (cadr (assoc 'mu4e-refile-folder (assoc account my-mu4e-account-alist)))))
          (message "maildir: %s, refile-folder: %s" maildir refile)
          refile)))
#+END_SRC

*** Вложения

Вложения можно добавлять с помощью dired (C-c RET C-a)
#+BEGIN_SRC elisp
(require 'gnus-dired)
;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
        (when (and (derived-mode-p 'message-mode)
                (null message-sent-message-via))
          (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC

*** Требования
**** Вся почта собирается в одном месте
**** В inbox попадает, то на что нужно реагироgвать

** Работа с БД

Соединения описываются в sql-connection-alist.
Имя формируется, как название сервиса, тип (P - бой, l - прочее),
есть ли запись (ro, rw - default) опционально.
Пароль хранится в keepassx под тем же именем.

Для единоразовых подключений можно использовать sql-mysql, sql-postgres.
(require 'sql) нужен, т.к. там определяется sql-connection-alist, а
без определенной переменной add-to-list работать не будет.

#+BEGIN_SRC elisp
  (require 'sql)

  (add-to-list
   'sql-connection-alist
   '("postgres-l"
     (sql-product 'postgres)
     (sql-server "localhost")
     (sql-user "site")
     (sql-database "site")
     (sql-port 5432)))

  (add-to-list
   'sql-connection-alist
   '("devstack-l"
     (sql-product 'mysql)
     (sql-server "james")
     (sql-user "root")
     (sql-database "nova")
     (sql-port 3306)))
#+END_SRC

Интерактивно выбираем подключение, обновляем пароль в выбранной
структуре через get-pass, также пароль копируется в буфер (для
postgres).

#+BEGIN_SRC elisp
(defun sql-connect-with-pass (connection)
  (interactive
   (helm-comp-read "Select server: " (mapcar (lambda (item)
                                               (list
                                                (nth 0 item)
                                                (nth 0 item)))
                                             sql-connection-alist)))
  ;; get the sql connection info and product from the sql-connection-alist
  (let* ((connection-info (assoc connection sql-connection-alist))
         (connection-product (nth 1 (nth 1 (assoc 'sql-product connection-info))))
         (sql-password (get-pass connection)))
    (kill-new sql-password)
    ;; delete the connection info from the sql-connection-alist
    (setq sql-connection-alist (assq-delete-all connection sql-connection-alist))
    ;; delete the old password from the connection-info
    (setq connection-info (assq-delete-all 'sql-password connection-info))
    ;; add the password to the connection-info
    (nconc connection-info `((sql-password ,sql-password)))
    ;; add back the connection info to the beginning of sql-connection-alist
    ;; (last used server will appear first for the next prompt)
    (add-to-list 'sql-connection-alist connection-info)
    ;; override the sql-product by the product of this connection
    (setq sql-product connection-product)
    ;; connect
    (sql-connect connection connection)
    ;; (if current-prefix-arg
    ;;         (sql-connect connection connection)
    ;;       (sql-connect connection))
    ))
#+END_SRC

Добавляем перенос строки после ответа, т.к. при запросе из отдельного
буфера может не добавиться. Включается обрезка длинных строк, не
перенос.

#+BEGIN_SRC elisp
(global-set-key (kbd "C-c s s") 'sql-set-sqli-buffer)
(global-set-key (kbd "C-; d") 'sql-connect-with-pass)

(setq sql-mysql-options
      (list "--default-character-set=utf8" "-A"))

(defun sql-add-newline-first (output)
  "Add newline to beginning of OUTPUT for `comint-preoutput-filter-functions'"
  (concat "\n" output))

(defun sqli-add-hooks ()
  "Add hooks to `sql-interactive-mode-hook'."
  (add-hook 'comint-preoutput-filter-functions
            'sql-add-newline-first)
  (toggle-truncate-lines t))

(add-hook 'sql-interactive-mode-hook 'sqli-add-hooks)
#+END_SRC

Сохранение истории таким способом не работает при закрытии буфера,
поэтому нужно сначала убить процесс (TODO при закрытии буфера вызывать
сохранение истории).
#+BEGIN_SRC elisp
;; comint-input-ring-size 500
  (defun my-sql-save-history-hook ()
    (let ((lval 'sql-input-ring-file-name)
          (rval 'sql-product))
      (if (symbol-value rval)
          (let ((filename
                 (concat "~/.emacs.d/history.d/"
                         (symbol-name (symbol-value rval))
                         "-history.sql")))
            (set (make-local-variable lval) filename))
        (error
         (format "SQL history will not be saved because %s is nil"
                 (symbol-name rval))))))

  (add-hook 'sql-interactive-mode-hook 'my-sql-save-history-hook)
#+END_SRC

#+RESULTS:
| my-sql-save-history-hook | sqli-add-hooks |

** Python

*** Просмотр документации

Для поиска документации по используется pylookup,
который индексирует документацию python, и сохраняет индекс локально.

#+BEGIN_SRC elisp
;; add pylookup to your loadpath, ex) "~/.lisp/addons/pylookup"
(setq pylookup-dir (with-emacs-dir "plugins/pylookup"))
(add-to-list 'load-path pylookup-dir)
;; load pylookup when compile time
(eval-when-compile (require 'pylookup))

;; set executable file ande db file
(setq pylookup-program (concat pylookup-dir "/pylookup.py"))
(setq pylookup-db-file (concat pylookup-dir "/pylookup.db"))

;; to speedup, just load it on demand
(autoload 'pylookup-lookup "pylookup"
  "Lookup SEARCH-TERM in the Python HTML indexes." t)
(autoload 'pylookup-update "pylookup"
  "Run pylookup-update and create the database at `pylookup-db-file'." t)
#+END_SRC

#+RESULTS:

Просмотр документации: pylookup-lookup ищет слово под курсором и
предлагает выбор.
#+BEGIN_SRC elisp
  (defun pylookup-view-doc-index ()
    (interactive)
    (browse-url (concat "file://"
                        pylookup-dir
                        "/python-2.7.7-docs-html/index.html")))
#+END_SRC

#+RESULTS:
| pylookup-keys | wisent-python-default-setup | er/add-python-mode-expansions | jedi:setup | (lambda nil (local-set-key (kbd C-M-i) (quote jedi-complete)) (local-set-key (kbd C-<tab>) (quote jedi-complete)) (local-set-key (kbd C-c C-d C-d) (quote jedi:show-doc)) (local-set-key (kbd C-c C-d h) (quote pylookup-lookup)) (local-set-key (kbd C-c v) (quote pep8)) (local-set-key (kbd C-c l) (quote pylint)) (local-set-key (kbd C-c d) (quote pep257)) (jedi:setup))  |

*** Display current buffer structure

#+BEGIN_SRC elisp
(defun occur-python-structure ()
  (interactive)
  (occur "def\\b\\|class\\b\\|=[ ]?lambda"))
#+END_SRC

*** Tools

#+BEGIN_SRC elisp
(setq pylint-cmd
    (concat "pylint --rcfile ~/files/settings/linters/pylintrc"
            " -rn --msg-template='{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}' "))

(defvar pep257-hist nil)

(defun pep257 ()
  (interactive)
  (let* ((cmd (read-shell-command
               "Command: "
               (concat "~/bin/pep257.py " (file-name-nondirectory (or (buffer-file-name) "")))
               'pep257-hist))
         (null-device nil))
    (grep cmd)))

(setq jedi:tooltip-method '(pos-tip popup))
(setq jedi:server-args '("--virtual-env" "~/m/nova/.tox/py27" "--log-traceback"))
(setq jedi:setup-keys t)                      ; optional
(setq jedi:complete-on-dot t)                 ; optional


(setq
 python-shell-interpreter "ipython"
 python-shell-interpreter-args "-i")
#+END_SRC

*** Hooks

#+BEGIN_SRC elisp
(defun python-keys ()
  (local-unset-key (kbd "C-c C-d"))
  (local-unset-key (kbd "C-; s"))
  (local-set-key (kbd "C-c C-d h") 'pylookup-lookup)
  (local-set-key (kbd "C-c C-d i") 'pylookup-view-doc-index)
  (local-set-key (kbd "C-c C-d C-d") 'jedi:show-doc)
  (local-set-key (kbd "C-c v") 'pep8)
  (local-set-key (kbd "C-c l") 'pylint)
  (local-set-key (kbd "C-c d") 'pep257)
  (local-set-key (kbd "C-; s s") 'occur-python-structure)
  (local-set-key (kbd "C-; s c") 'grep-at-point)
  (local-set-key (kbd "C-; s f") 'grep-function-at-point)
  (local-set-key (kbd "C-; s w") 'what-function-full)
  (local-set-key (kbd "C-M-i") 'jedi-complete)
  (local-set-key (kbd "C-<tab>") 'jedi-complete)
  (jedi:setup))

(add-hook 'python-mode-hook 'python-keys)

(add-hook 'python-mode-hook 'which-function-mode)
#+END_SRC

*** Запуск тестов

#+BEGIN_SRC elisp
  (defun colorize-test-message (message)
    )

  (defun run-test-quick (arg)
    (interactive "P")
    (let ((cmd '(concat "~/prog/ttr/bin/ttr " (what-function '(4)))))
      (if (eq (car arg) 4)
          (compile (eval cmd))
        (message
         (shell-command-to-string (eval cmd))))))

  (defun multiple-replace (replaces string)
    (if (null replaces)
        string
      (let ((replace (first replaces)))
       (multiple-replace
        (rest replaces)
        (replace-regexp-in-string (first replace) (second replace) string)))))

  (defun python-path (file-name function-name)
    (concat (multiple-replace
             `((,(concat (chomp (shell-command-to-string "git rev-parse --show-toplevel")) "/") "")
               ("/" "\.")
               ("\.py$" ""))
               file-name) "." function-name))

  (defun what-function (arg)
    (interactive "P")
    (let* ((orig-func (which-function))
           (func (if (eq (car arg) 4)
                    (python-path (buffer-file-name) orig-func)
                   (if (string-match "\\." orig-func)
                       (cadr (split-string orig-func "\\."))
                     orig-func))))
     (kill-new func)
     (message "Copied function name '%s' to the clipboard." func)
     func))

  (defun what-function-full ()
    (interactive)
    (what-function '(4)))

  (defun add-run-test-quick-key ()
    (local-set-key (kbd "C-c C-t C-t") 'run-test-quick))

  (add-hook 'python-mode-hook 'add-run-test-quick-key)
#+END_SRC

#+RESULTS:
: what-function

*** virtualenv

Для удобства работы используется virtualevwrapper for emacs,
порт virtualevwrapper.sh, делает все то же но внутри emacs.
Команды run-python, shell-command, org-evaluate выполняются с учетом
текущей virtualenv

#+BEGIN_SRC elisp
(require 'virtualenvwrapper)
(venv-initialize-interactive-shells) ;; if you want interactive shell support
(venv-initialize-eshell) ;; if you want eshell support
(setq venv-location "~/m/nova/.tox/")
#+END_SRC

#+RESULTS:
: ~/.ve

*** Search symbol at point

#+BEGIN_SRC elisp
  (defun grep-at-point ()
    (interactive)
    (let ((s (thing-at-point 'symbol t)))
      (ack (concat "ag -i --nogroup --nocolor " s " --ignore tests")
           (ack-default-directory 4))))

  (defun grep-function-at-point ()
    (interactive)
    (let ((s (what-function '(0))))
      (ack (concat "ag -i --nogroup --nocolor " s " --ignore tests")
           (ack-default-directory 4))))
#+END_SRC

** Lisp

#+BEGIN_SRC elisp
(setq inferior-lisp-program "sbcl --dynamic-space-size 2048")
(setq slime-net-coding-system 'utf-8-unix)
(setq slime-contribs '(slime-fancy))
#+END_SRC

Включаем paredit для мест, где вводится lisp.

#+BEGIN_SRC elisp
(add-hook 'clojure-mode-hook #'enable-paredit-mode)
(add-hook 'cider-mode-hook #'enable-paredit-mode)
(add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook #'enable-paredit-mode)
#+END_SRC

#+BEGIN_SRC elisp
(add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
;; SLIME’s REPL has the very annoying habit of grabbing DEL
;; which interferes with paredit’s normal operation.
;; To alleviate this problem use the following code:

;; Stop SLIME's REPL from grabbing DEL,
;; which is annoying when backspacing over a '('
(defun override-slime-repl-bindings-with-paredit ()
  (define-key slime-repl-mode-map
    (read-kbd-macro paredit-backward-delete-key) nil))
(add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)
#+END_SRC

;; (checkdoc)
;; (package-buffer-info)
;; (byte-compile-file "~/.emacs.d/init.el")
;; (elint-file "~/.emacs.d/init.el")

*** Lisp basic keys

mark-defun - C-M-h
prog-indent-sexp - C-M-q
paredit-open-<x> - with C-u 1 wraps next sexp (M-( is also available
  for "("). Wrap can be done with visual mark.
paredit-raise-sexp - M-r
paredit-splice-sexp-killing-backward - M-up
paredit-forward-slurp-sexp - C-right
paredit-forward-barf-sexp - C-left

https://github.com/Fuco1/.emacs.d/blob/master/files/smartparens.el
https://ebzzry.io/en/emacs-pairs/#manipulation

** JS

Для просмотра json нужна возможность свертывать отдельные блоки,
есть hs-minor-mode, который позволяет свертывать только {} блоки.

Настраиваем, чтобы можно было свертывать [].

#+BEGIN_SRC elisp
(add-to-list 'hs-special-modes-alist '(js-mode . ("[{[]" "[}\\]]" "/[*/]" nil)))
#+END_SRC

Включаем hs-minor-mode для JS.

#+BEGIN_SRC elisp
(defun add-hs-minor-mode()
  (hs-minor-mode))

(add-hook 'js-mode-hook 'add-hs-minor-mode)
#+END_SRC

** Golang

#+BEGIN_SRC elisp
(use-package go-mode
  :ensure t)


(use-package company
  :ensure t)


(use-package lsp-mode
  :ensure t)

(add-hook 'go-mode-hook (lambda ()
    (setq tab-width 4)
    (flycheck-mode 1)
    (lsp)
    (add-hook 'before-save-hook 'gofmt-before-save nil 'local)
    (lambda ()
      (push '("error" . ?∇) prettify-symbols-alist)
      (push '("err" . ?⊙) prettify-symbols-alist)
      (push '("exists" . ?∃) prettify-symbols-alist)
      (push '(":= range" . ?∈) prettify-symbols-alist)
      (push '("ok" . ?✓) prettify-symbols-alist)
      (push '("==" . ?≡) prettify-symbols-alist)
      (push '(":=" . ?≔) prettify-symbols-alist)
      (push '(">=" . ?≥) prettify-symbols-alist)
      (push '("<=" . ?≤) prettify-symbols-alist)
      (push '("<-" . ?←) prettify-symbols-alist)
      (push '("!=" . ?≠) prettify-symbols-alist)
      (push '("..." . ?…) prettify-symbols-alist)
      (push '("nil" . ?∅) prettify-symbols-alist)
      (push '("make" . ?&) prettify-symbols-alist)
      (push '("new" . ?&) prettify-symbols-alist)
      (push '("context.Context" . ?◇) prettify-symbols-alist)
      (push '("ctx" . ?⋄) prettify-symbols-alist)
      (push '("mu" . ?❢) prettify-symbols-alist)
      (push '("&&" . ?∧) prettify-symbols-alist)
      (push '("||" . ?∨) prettify-symbols-alist)
      (push '("!" . ?¬) prettify-symbols-alist)
      (push '("interface{}" . ?⋆) prettify-symbols-alist)
      (push '("struct{}" . ?ε) prettify-symbols-alist)
      )
    ))

(global-prettify-symbols-mode +1)
#+END_SRC

** Calendar

#+BEGIN_SRC elisp
(require 'calendar)
(setq calendar-week-start-day 1)
(setq calendar-holidays '((holiday-fixed 11 4 "")
                          (holiday-fixed 1 1 "")
                          (holiday-fixed 1 2 "")
                          (holiday-fixed 1 5 "")
                          (holiday-fixed 1 6 "")
                          (holiday-fixed 1 7 "")
                          (holiday-fixed 1 8 "")
                          (holiday-fixed 1 9 "")
                          (holiday-fixed 2 23 "")
                          (holiday-fixed 3 9 "")
                          (holiday-fixed 5 1 "")
                          (holiday-fixed 5 4 "")
                          (holiday-fixed 5 11 "")
                          (holiday-fixed 6 12 "")))

(defvar iy/calendar-copy-date-format-history '("%Y-%m-%d"))

(defun iy/calendar-copy-date (arg)
  "Copy date under the cursor      . Read format from minibuffer if ARG,
      use recently used format if no ARG . See the function `format-time-string'
      for the document of time format string"
  (interactive "P")
  (let ((date (calendar-cursor-to-date t))
        (format (if arg
                    (completing-read
                     "Date Format:"
                     iy/calendar-copy-date-format-history nil nil nil
                     'iy/calendar-copy-date-format-history nil nil)
                  (car iy/calendar-copy-date-format-history)))
        string)
    (setq date (encode-time 0 0 0 (cadr date) (car date) (nth 2 date)))
    (setq string (format-time-string format date))
    (if (eq last-command 'kill-region)
        (kill-append string nil)
      (kill-new string))))

(define-key calendar-mode-map "c" 'iy/calendar-copy-date)
#+END_SRC

#+BEGIN_SRC elisp
(defun yesterday-time ()
  "Provide the date/time 24 hours before the time now in the format of current-time."
  (setq
   now-time (current-time)              ; get the time now
   hi (car now-time)                    ; save off the high word
   lo (car (cdr now-time))              ; save off the low word
   msecs (nth 2 now-time)               ; save off the milliseconds
   )

  (if (< lo 20864)                      ; if the low word is too small for subtracting
      (setq hi (- hi 2)  lo (+ lo 44672)) ; take 2 from the high word and add to the low
    (setq hi (- hi 1) lo (- lo 20864))  ; else, add 86400 seconds (in two parts)
    )
  (list hi lo msecs)                    ; regurgitate the new values
  )
#+END_SRC

** Автозапуск

#+BEGIN_SRC elisp
;; (run-or-get-shell "default")

(find-file "~/emacs-conf/emacs.org")
(find-file "~/org/task.org")
(find-file "~/files/cpp/db.gpg")
(find-file "~/org/reference.org")
(find-file "~/.emacs.d/shells.el")
(find-file "~/org/log.org")
(end-of-buffer)
(switch-to-buffer-other-window "task.org")
(ace-window 0)
(run-mirantis-vpn)
(run-proxy)
(server-start)
#+END_SRC

** Description
*** Links

ML archive
http://lists.gnu.org/archive/html/emacs-devel/

Emacs commits
http://git.savannah.gnu.org/cgit/emacs.git/log/

Git repo
git://git.savannah.gnu.org/emacs.git

** Yaml

#+BEGIN_SRC elisp
(use-package yaml-mode
  :init

  (defun copy-visible-only ()
    (interactive)
    (cl-flet ((buffer-substring 'buffer-substring-selective-display-only))
      (if (use-region-p)
          (progn
            (kill-new (buffer-substring (region-beginning) (region-end)))
            (message "Text selection copied."))
        (progn
          (kill-new (buffer-substring (point-min) (point-max)))
          (message "Buffer content copied.")))))

  (defun buffer-substring-selective-display-only (start end)
    (when (> start end) (setq start (prog1 end (setq end start))))
    (let* ((filter-buffer-substring-function
            (lambda (beg end _delete)
              (let* ((strg (buffer-substring beg end)))
                (if selective-display
                    (let ((regexp (format "^[[:space:]]\\{%s,\\}" selective-display)))
                      (message "Selective display enabled, flushing lines with regexp: %s" regexp)
                      (setq strg (with-temp-buffer
                                   (insert strg)
                                   (goto-char (point-min))
                                   (flush-lines regexp)
                                   (buffer-string)))))

                (set-text-properties 0 (length strg) () strg)
                strg))))
      (filter-buffer-substring start end)))

  (defun aj-toggle-fold ()
    "Toggle fold all lines larger than indentation on current line"
    (interactive)
    (let ((col 1))
      (save-excursion
        (back-to-indentation)
        (setq col (+ 1 (current-column)))
        (set-selective-display
         (if selective-display nil (or col 1))))))
  :bind
  (:map yaml-mode-map
        ("C-c t" . aj-toggle-fold)))

(use-package highlight-indent-guides
  :hook
  ((yaml-mode . highlight-indent-guides-mode)))
#+END_SRC

** gcal

#+BEGIN_SRC elisp
;; (setq package-check-signature nil)

;; see https://github.com/myuhe/org-gcal.el

(use-package org-gcal
  :ensure t
  :config
  (setq org-gcal-client-id "12159727526-7s5315gp2k8hkaadmr13psq1mhsvtjq0.apps.googleusercontent.com"
        org-gcal-client-secret (get-pass "gcal-secret")
        org-gcal-file-alist '(("avolkov@mirantis.com" .  "~/org/work-gcal.org"))))

;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync)))
#+END_SRC

** functions

#+BEGIN_SRC elisp
(defun run-nova-python ()
  (interactive)
  (let ((python-shell-buffer-name "ipython-nova"))
    (run-python "/home/amadev/m/nova/.tox/py27/bin/ipython --profile nova --simple-prompt -i" nil t)))

(defun start-openstack-controller ()
  (interactive)
  (start-local "controller" "
cd ~/m/openstack-controller
export KUBECONFIG=~/avolkov-22
kubectl get nodes
 export export OSCTL_METRICS_PORT=8088
tox -e dev"))
#+END_SRC

** Experiments

#+BEGIN_SRC elisp
 (autoload 'bash-completion-dynamic-complete
   "bash-completion"
   "BASH completion hook")
 (add-hook 'shell-dynamic-complete-functions
   'bash-completion-dynamic-complete)
#+END_SRC

run nova repl
#+BEGIN_SRC elisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

(defun display-ansi-colors ()
  (interactive)
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))

(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

(use-package bash-completion
  :ensure t)

(setq js-indent-level 2)
#+END_SRC
