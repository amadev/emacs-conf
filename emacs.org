#+STARTUP: content
* emacs
  :PROPERTIES:
  :tangle:   /home/amadev/.emacs.d/init.el
  :results: replace
  :END:

** Инициализация emacs

Запускаю emacs из консоли скрина, при этом скрин наследует переменные
окружения, а именно ssh-agent, чтобы можно было нормально
пользоваться magit без ввода паролей для ssh.

Конфигурация создается через tangle всех исходников описанных ниже.
Часть конфигурации представлена монолитным куском, который я буду
обрабатывать и постепенно описывать.
Для создания файла org-babel-tangle c-c c-v c-t.

По умолчанию идет список пакетов от gnu http://elpa.gnu.org/packages/.
melpa.milkbox.net - модерируемый, с автосборками и фильтром.
marmalade-repo.org - не обновляется.
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
;;(setq package-enable-at-startup nil)
(package-initialize)
#+END_SRC

Для меня удобнее, когда я вижу одно окно, не отвлекаясь на
дополнительные приложения. В один момент времени выполняю одну функцию.
Убираем лишние GUI-свистелки.

#+BEGIN_SRC emacs-lisp

  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

#+END_SRC

Отключаю пригласительный экран и текст в скретч.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t
        initial-scratch-message nil)

#+END_SRC

ido - интерфейс для выбора из списка, добавлен, как встроенный модуль emacs.

Включаем повсеместно, включаем flex-matching, поиск файла под курсом.
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-use-filename-at-point 'guess)
(require 'ido)
(ido-mode t)
(ido-everywhere t)
#+END_SRC

#+RESULTS:
: guess

** Работа с файлами dired

Для просмотра содержимого папки можно C-x C-f C-f,
либо C-x d, для второго варианта можно указать glob-шаблон,
чтобы отфильтровать нужное, например *.org.

Сортировка по дате/алфавиту - s.
Задание переключателей для ls - C-u s, можно указать h, чтобы видеть
размеры в человекопонятном виде.

Режим wdired позволяет изменять имена файлов, как текст C-x C-q.

Пометка файлов через regexp - % m.
Выделить все - * s.
Инвертировать выделение - * t.

Скопировать, переместить, удалить - C, R, D.

Скопировать полный путь до файла C-u 0 w.

Настройки отображения dired по умолчанию.
Показываем все, сортируем по дате (новые внизу), но сначала директории.
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-altrh  --group-directories-first")
#+END_SRC

#+RESULTS:
: -altrh

** Утилиты
*** Общие функции
#+BEGIN_SRC emacs-lisp
(setenv "LANG" "en_US.UTF-8")
#+END_SRC

**** Удалениие пробелов вначале и конце строки.

#+BEGIN_SRC emacs-lisp
(defun chomp (str)
      "Chomp leading and tailing whitespace from STR."
      (while (string-match "\\`\n+\\|^\\s-+\\|\\s-+$\\|\n+\\'"
                           str)
        (setq str (replace-match "" t t str)))
      str)
#+END_SRC

**** Получение пароля происходит через консольную команду

[[file:system.org::*%D0%9F%D0%B0%D1%80%D0%BE%D0%BB%D0%B8][Пароли]]

#+BEGIN_SRC emacs-lisp
  (defun get-pass (name)
    (let ((cname (if (symbolp name) (symbol-name name) name)))
      (chomp (shell-command-to-string (concat "cpp.sh " cname)))))
#+END_SRC

**** На клавиатуре сломался шифт и очень не хватало скобочек.

#+BEGIN_SRC emacs-lisp :tangle no

(define-key key-translation-map (kbd "9") (kbd "("))
(define-key key-translation-map (kbd "C-9") (kbd "9"))
(define-key key-translation-map (kbd "0") (kbd ")"))
(define-key key-translation-map (kbd "C-0") (kbd "0"))
(define-key key-translation-map (kbd "6") (kbd ":"))
(define-key key-translation-map (kbd "C-6") (kbd "6"))

#+END_SRC

#+RESULTS:
: 6

**** Пути от домашней папки и emacs.d.
#+BEGIN_SRC emacs-lisp
  (defun may-be-add-first-slash (path)
    (concat (if (string-match "^/" path) "" "/") path))

  (defun with-home-dir (path)
    (concat (expand-file-name "~") (may-be-add-first-slash path)))

  (defun with-emacs-dir (path)
    (with-home-dir (concat ".emacs.d" (may-be-add-first-slash path))))
#+END_SRC

**** Копирование имени файла текущего буфера в clipboard.
#+BEGIN_SRC emacs-lisp
  (defun copy-file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))

#+END_SRC

#+RESULTS:
: copy-file-name-to-clipboard
: copy-file-name-to-clipboard

**** Устанавливаем альтернативный метод ввода, срабатывает после С+\.
#+BEGIN_SRC emacs-lisp
(setq default-input-method "russian-computer")
#+END_SRC

#+RESULTS:
: russian-computer

**** Шаблоны

Включаем возможность использования шаблонов везде.
Личные шаблоны храняться в file:///~/.emacs.d/snippets/.
Шаблоны могут использоваться как по ключу (key), так и по сочетанию
клавиш (binding), последнее полезно для оборачивания региона шаблоном.
yas-wrap-around-region включает такое поведение.

#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
(setq yas-wrap-around-region t)
#+END_SRC

**** Браузер
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
     browse-url-generic-program "google-chrome")

#+END_SRC

**** Время

#+BEGIN_SRC emacs-lisp
(setq system-time-locale "C")
#+END_SRC

#+RESULTS:
: C

**** Смена сплита буферов вертикальный/горизонтальный
#+BEGIN_SRC emacs-lisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

#+END_SRC

#+RESULTS:
: toggle-window-split

**** Смена содержимого окон
#+BEGIN_SRC emacs-lisp
  (defun swap-windows (arg)
    "Transpose the buffers shown in two windows."
    (interactive "p")
    (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
      (while (/= arg 0)
        (let ((this-win (window-buffer))
              (next-win (window-buffer (funcall selector))))
          (set-window-buffer (selected-window) next-win)
          (set-window-buffer (funcall selector) this-win)
          (select-window (funcall selector)))
        (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

#+END_SRC

**** Оформление

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 140) ;; 14pt
;; (load-theme 'adwaita t)
(load-theme 'warm-night t)
(set-cursor-color "#909090")
;; (set-cursor-color "#474242")
#+END_SRC

Разбивать окна вертикально.

#+BEGIN_SRC emacs-lisp
(setq split-width-threshold 120)
#+END_SRC

#+RESULTS:
: 80

**** Аккорды

Назначаем сочетания символов на часто используемые функции.
#+BEGIN_SRC emacs-lisp
(require 'key-chord)
(key-chord-mode 1)
(key-chord-define-global "yy" 'ack)
(key-chord-define-global "jj" 'ace-jump-mode)
(key-chord-define-global "hh" 'magit-status)
#+END_SRC

**** Работа c unicode
Часто используемые символы удобно смотреть:
http://xahlee.info/comp/unicode_index.html
http://www.unexpected-vortices.com/doc-notes/some-common-unicode-characters.html
Вставка c-x 8 ret.

**** Spell checking

Для проверки можно использовать flyspell-region или ispell-region,
также можно влючить проверку для mode через mode-hook (flyspell-mode).

http://endlessparentheses.com/ispell-and-org-mode.html

M-$ - исправление первого слова с ошибкой после курсора.
В сессии исправления можно принять текущее слова (a/A),

добавить в личный словарь (i).

Переключение словаря - ispell-change-dictionary.

**** Keys

#+BEGIN_SRC elisp
(defun magit-nova ()
  (interactive)
  (switch-to-buffer "*magit: nova"))

(global-set-key (kbd "C-; n") 'magit-nova)
#+END_SRC

*** История и бекапы
**** Обработка истории comint-буферов

Взято из https://oleksandrmanzyuk.wordpress.com/2011/10/23/a-persistent-command-history-in-emacs/.
При старте буфера с comint вешаем хук, который устанавливает
comint-input-ring-file-name, а также устанавливает callback для
sentinel (функции, которая срабатывает при любых изменениях в
процессе).

#+BEGIN_SRC emacs-lisp

(setq comint-input-ring-size 5000)
(defun turn-on-comint-history ()
  (let ((process (get-buffer-process (current-buffer))))
    (when process
      (setq comint-input-ring-file-name
            (format "~/.emacs.d/history.d/inferior-%s-history"
                    (process-name process)))
      (comint-read-input-ring)
      (set-process-sentinel process
                            #'comint-write-history-on-exit))))

#+END_SRC

#+RESULTS:
: turn-on-comint-history

Записываем переменную из истории.
Сохранение истории происходит для команд введенных в интерактивном режиме
в ~/.emacs.d/comint-history/.
Просмотр истории comint-dynamic-list-input-ring или напрямую в файле,
что удобней. История подгружается при запуске буфера и сохраняется при
остановке процесса. Поиск назад по многострочному запросу не работает.

В shell работает helm-comint-input-ring, как вариант выбора предыдущей
истории, в sqli - нет, но проблема с многострочными та же.

#+BEGIN_SRC emacs-lisp

(defun comint-write-history-on-exit (process event)
  (comint-write-input-ring)
  (let ((buf (process-buffer process)))
    (when (buffer-live-p buf)
      (with-current-buffer buf
        (insert (format "\nProcess %s %s" process event))))))

#+END_SRC

#+RESULTS:
: comint-write-history-on-exit

Включение истории для режимов.
#+BEGIN_SRC emacs-lisp
(add-hook 'inferior-python-mode-hook 'turn-on-comint-history)
(add-hook 'inferior-emacs-lisp-mode-hook 'turn-on-comint-history)
#+END_SRC

#+RESULTS:
| turn-on-comint-history | my-sql-save-history-hook | sqli-add-hooks |

Для обработки закрытия буфера и выключения emacs используется.

#+BEGIN_SRC emacs-lisp
(require 'comint)
(add-hook 'kill-buffer-hook 'comint-write-input-ring)

(defun mapc-buffers (fn)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
            (funcall fn)))
        (buffer-list)))

(defun comint-write-input-ring-all-buffers ()
  (mapc-buffers 'comint-write-input-ring))

(add-hook 'kill-emacs-hook 'comint-write-input-ring-all-buffers)

#+END_SRC

**** Минибуфер

Работает автоматически, при загрузке emacs подгружается история.
Для просмотра истории helm-minibuffer-history.

#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/history.d/minibuffer-history")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

#+RESULTS:
| kill-ring | search-ring | regexp-search-ring |

**** Бекапы
Бекап создается при первом сохранении буфера.
Авто-сейв после 30 сек или 300 символов.
Сохраняемые файлы вынес в отдельную папку, чтобы не гадить в рабочей
директории. Используем версии бекапных файлов и делаем бекапы файлов,
которые под контролем версий (git, svn).

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
(setq version-control t)
(setq vc-make-backup-files t)
(setq delete-old-versions -1)
#+END_SRC

#+RESULTS:
: t

*** Поиск
По умолчанию запускаем поиск regexp.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

Для поиска символа под курсором можно воспользоваться
(isearch-forward-symbol-at-point) M-s .
либо дополнительной функцией в режиме поиска.
#+BEGIN_SRC emacs-lisp
(define-key isearch-mode-map (kbd "C-*")
  (lambda ()
    "Reset current isearch to a word-mode search of the word under point."
    (interactive)
    (setq isearch-word t
          isearch-string ""
          isearch-message "")
    (isearch-yank-string (word-at-point))))
#+END_SRC
Полезные сочетания в режиме поиска:
М-r - переключение regexp,
M-c - перечлючение case sensitive,
M-e - редактирование.

*** erc

echo "machine irc.freenode.net login avolkov port 6667 password $(cpp.sh irc.freenode.net)" >> \
   ~/.authinfo
echo "machine miracloud.irc.slack.com login andrey.volkov port 6667 password $(cpp.sh mirantis_irc)" >> \
   ~/.authinfo

#+BEGIN_SRC emacs-lisp
(defun start-ircs ()
  (interactive)
  (erc-tls :server "irc.freenode.net" :port 6697
    :nick "avolkov" :full-name "Andrey Volkov")
  (erc-tls :server "miracloud.irc.slack.com" :port 6667
    :nick "andrey.volkov" :full-name "Andrey Volkov")
)

(require 'erc-join)
(erc-autojoin-mode 1)

(setq erc-autojoin-channels-alist
  '(
    ("freenode.net" "#openstack-nova")
  ))

(setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                    "324" "329" "332" "333" "353" "477"))

(setq erc-format-query-as-channel-p t
      erc-track-priority-faces-only 'all
      erc-track-faces-priority-list '(erc-error-face
                                      erc-current-nick-face
                                      erc-keyword-face
                                      erc-nick-msg-face
                                      erc-direct-msg-face
                                      erc-dangerous-host-face
                                      erc-notice-face
                                      erc-prompt-face))

(require 'erc-log)
(setq erc-log-channels-directory "~/.emacs.d/erc/logs/")
(erc-log-enable)

(setq erc-save-buffer-on-part nil
      erc-save-queries-on-quit nil
      erc-log-write-after-send t
      erc-log-write-after-insert t)
#+END_SRC

#+BEGIN_SRC elisp
  (setq erc-important-channels
        '("#quotas" "#emacs" "#mos-ere" "#mos-nova" "#mos-nova-flood-ru"))

  (defun list-erc-joined-channels ()
    "Return all the channels you're in as a list. This does not include queries."
    (save-excursion
      ;; need to get out of ERC mode so we can have *all* channels returned
      (set-buffer "*scratch*")
      (mapcar #'(lambda (chanbuf)
                  (with-current-buffer chanbuf (erc-default-target)))
              (erc-channel-list erc-process))))

  (defun list-erc-tracked-channels (excluded)
    (remove-if #'(lambda (row) (member row excluded)) (list-erc-joined-channels)))

  (defun enable-erc-notification-for-important-channels-only ()
    (interactive)
    (setq erc-track-priority-faces-only (list-erc-tracked-channels erc-important-channels))
    (message "Enable notifications for channels %s" erc-important-channels))

  (defun disable-non-priority-notification ()
    (interactive)
    (setq erc-track-priority-faces-only 'all)
    (message "Notifications from all channels are disabled"))

  (defun enable-all-notifications ()
    (interactive)
    (setq erc-track-priority-faces-only nil)
    (message "Notifications from all channels are enabled"))

#+END_SRC

** terminal

Для работы с терминалом вполне хватает shell + rename buffer.  Если
нужно запустить новый, использовать (start-shell <shell_name>
<initial_cmd).

Для управления несколькими консолями используется: C-; b runs the
command run-or-get-shell.  Команда может запускать или переключаться
на запущенные консоли с помощью helm.

Список консолей определяется в переменной shell-alist.  Каждой консоли
может быть указана инициализирующая команда, либо хост для ssh
консоли.

Directory tracking для локальных консолей работает из коробки, для
ssh-консолей требуется выставление comint-file-name-prefix.

#+BEGIN_SRC emacs-lisp

  (defun make-comint-directory-tracking-work-remotely ()
    "Add this to comint-mode-hook to make directory tracking work
    while sshed into a remote host, e.g. for remote shell buffers
    started in tramp. (This is a bug fix backported from Emacs 24:
    http://comments.gmane.org/gmane.emacs.bugs/39082"
    (set (make-local-variable 'comint-file-name-prefix)
         (or (file-remote-p default-directory) "")))

  (add-hook 'comint-mode-hook 'make-comint-directory-tracking-work-remotely)

  (defun start-shell(name cmd)
    (shell name)
    (comint-send-string name (concat cmd "\n")))

  (defun start-ssh (name host)
    (find-file (format "/ssh:%s:" host))
    (shell name))

  (setq shell-alist
        '(("default" . nil)
          ("nova" . (cmd "cd ~/m/nova && vact"))
          ("python" . (cmd "ipython"))
          ("python3" . (cmd "ipython3"))
          ("james" . (host "james"))
          ("mos-con2-6-n2" . (host "root@mos-con2"))
          ("mos-con1-3-n1" . (host "root@mos-con1"))
          ("mos-cp1-4-n3" . (host "root@mos-cp1"))
          ("mos-cp2-5-n4" . (host "root@mos-cp2"))
          ("mos-fuel" . (host "root@mos-fuel"))
          ("sally" . (host "sally"))))

  (defun start-shells ()
    (interactive)
    (run-or-get-shell "default")
    (run-or-get-shell "nova")
    (run-or-get-shell "python"))

  (defun run-or-get-shell (name)
    (interactive
     (helm-comp-read "Select shell: "
                     (mapcar (lambda (item)
                               (list
                                (nth 0 item)
                                (nth 0 item)))
                             shell-alist)))
    (let* ((opts (cdr (assoc name shell-alist)))
           (host (plist-get opts 'host))
           (cmd (or (plist-get opts 'cmd) "cd"))
           (auto (plist-get opts 'auto))
           (bf (concat "shell_" name)))
      (message "%s is picked, cmd %s, host %s" name cmd host)
      (if (get-buffer bf)
          (switch-to-buffer bf)
        (if host
            (start-ssh bf host)
          (start-shell bf cmd)))))

  (global-set-key (kbd "C-; b") 'run-or-get-shell)

#+END_SRC

Запуск текущего файла в compilation mode.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f7>") 'run-current-file)

(defun run-current-file ()
      "Execute or compile the current file.
   For example, if the current buffer is the file x.pl,
   then it'll call “perl x.pl” in a shell.
   The file can be php, perl, python, ruby, javascript, bash, ocaml, java.
   File suffix is used to determine what program to run."
      (interactive)
      (let (extention-alist fname suffix progName cmdStr)
        (setq extention-alist ; a keyed list of file suffix to comand-line program to run
              '(
                ("php" . "php")
                ("pl" . "perl")
                ("py" . "python")
                ("rb" . "ruby")
                ("js" . "js")
                ("sh" . "bash")
                ("" . "bash")
                ("ml" . "ocaml")
                ("vbs" . "cscript")
                ("java" . "javac")
                )
              )
        (setq fname (buffer-file-name))
        (setq suffix (file-name-extension fname))
        (setq progName (cdr (assoc suffix extention-alist)))
        (setq cmdStr (concat progName " \"" fname "\""))

        (if (string-equal suffix "el")
            (load-file fname)
          (if progName                  ; is not nil
              (progn
                (message "Running...")
                (compile (read-shell-command "Command: " cmdStr)))
            ;;(shell-command cmdStr))
            (message "No recognized program file suffix for this file.")
            ))))
#+END_SRC

Посыл региона в shell (посылает в первый запущенный shell).
TODO сделать mapping sh-buffer -> shell process.
#+BEGIN_SRC emacs-lisp
(defun sh-send-line-or-region (&optional step)
  (interactive ())
  (let ((proc (get-process "shell"))
        pbuf min max command)
    (unless proc
      (let ((currbuff (current-buffer)))
        (shell)
        (switch-to-buffer currbuff)
        (setq proc (get-process "shell"))
        ))
    (setq pbuff (process-buffer proc))
    (if (use-region-p)
        (setq min (region-beginning)
              max (region-end))
      (setq min (point-at-bol)
            max (point-at-eol)))
    (setq command (concat (buffer-substring min max) "\n"))
    (with-current-buffer pbuff
      (goto-char (process-mark proc))
      (insert command)
      (move-marker (process-mark proc) (point))
      ) ;;pop-to-buffer does not work with save-current-buffer -- bug?
    (process-send-string  proc command)
    (display-buffer (process-buffer proc) t)
    (when step
      (goto-char max)
      (next-line))))

(defun sh-send-line-or-region-and-step ()
  (interactive)
  (sh-send-line-or-region t))

(defun sh-switch-to-process-buffer ()
  (interactive)
  (pop-to-buffer (process-buffer (get-process "shell")) t))

(defun my-shell-mode-hook ()
  (progn
    (local-set-key (kbd "C-c C-c") 'sh-send-line-or-region)
    (local-set-key (kbd "C-u C-c C-c") 'sh-send-line-or-region-and-step)
    (local-set-key (kbd "C-c C-z") 'sh-switch-to-process-buffer)))

(add-hook 'sh-mode-hook 'my-shell-mode-hook)
#+END_SRC

** orgmode

Установка orgmode и его расширений.
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
#+END_SRC

Устанавливаем org-plus-contrib, нужно обновлять в чистом emacs
или удалять файлы elc при ошибках компиляции.

Файлы с задачами.
#+BEGIN_SRC emacs-lisp
  (setq my-org-dir (with-home-dir "org/"))
  (setq org-agenda-files 
        (mapcar
         #'(lambda (name) (concat my-org-dir name))
         '("task.org" "office.org")))
#+END_SRC

#+RESULTS:
| /home/amadev/org/gtd.org | /home/amadev/org/office.org |

Файлы, в которые переносятся задачи.
#+BEGIN_SRC emacs-lisp
(defun refile-org-files ()
(let ((files '("task.org" "office.org" "reference.org" "bookmarks.org")))
(mapcar #'(lambda (x) (concat my-org-dir x)) files)))

(setq org-refile-targets '((refile-org-files . (:level . 2))))
#+END_SRC

#+RESULTS:
: ((refile-org-files :level . 2))

Сочетание, для открытия агенды.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

#+RESULTS:
: org-agenda

Назначаем свойства при переключении todo.
#+BEGIN_SRC emacs-lisp
  ;; add properties then trigger todo states
  (setq org-todo-state-tags-triggers
        '(("CANCELLED"
           ("CANCELLED" . t)
           ("STARTED")
           ("WAITING"))
          ("WAITING"
           ("CANCELLED")
           ("STARTED")
           ("WAITING" . t))
          ("SOMEDAY"
           ("STARTED")
           ("CANCELLED")
           ("WAITING" . t))
          ("STARTED"
           ("STARTED" . t)
           ("CANCELLED")
           ("WAITING"))
          ("TODO"
           ("STARTED")
           ("CANCELLED")
           ("WAITING"))
          ("DONE"
           ("STARTED")
           ("CANCELLED")
           ("WAITING"))
          ))
#+END_SRC

#+RESULTS:
| CANCELLED | (CANCELLED . t) | (STARTED)   | (WAITING)     |
| WAITING   | (CANCELLED)     | (STARTED)   | (WAITING . t) |
| SOMEDAY   | (STARTED)       | (CANCELLED) | (WAITING . t) |
| STARTED   | (STARTED . t)   | (CANCELLED) | (WAITING)     |
| TODO      | (STARTED)       | (CANCELLED) | (WAITING)     |
| DONE      | (STARTED)       | (CANCELLED) | (WAITING)     |

*** Захват сообщений

Шаблоны.

%? - пользовательский ввод.
%U - дата.
%a - указатель на файл, в котором находишься при захвате.
%i - активный регион.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
        '(("i" "Inbox" entry (file+olp (concat my-org-dir "task.org") "task" "inbox")
           "* TODO %?\n\nAdded: %U\n  %i\n")
          ("f" "Inbox with file link" entry (file+olp (concat my-org-dir "task.org") "task" "inbox")
           "* TODO %?\n\nAdded: %U\n  %i\n%a\n")
          ("b" "Bookmark" entry (file+olp (concat my-org-dir "bookmarks.org") "Bookmarks" "inbox")
           "* TODO %c %?\n\nAdded: %U\n  %i\n")))
#+END_SRC

#+RESULTS:
| i | Inbox | entry | (file+olp (concat my-org-dir task.org) task inbox) | * TODO %? |

*** babel

Добавляем языки.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((lisp . t)
     (plantuml . t)
     (sh . t)
     (lisp . t)
     (ditaa . t)
     (R . t)
     (python . t)
     (ruby . t)
     (sql . t)
     (dot . t)
     (C . t)
     (sqlite . t)
     (ledger . t)))
#+END_SRC

#+RESULTS:
: ((lisp . t) (plantuml . t) (sh . t) (lisp . t) (ditaa . t) (R . t) (python . t) (ruby . t) (sql . t) (dot . t) (C . t) (sqlite . t) (ledger . t))

Отключаем запрос на подтверждение выполнения.
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

#+RESULTS:

Задаем приложение для обработки.

#+BEGIN_SRC emacs-lisp
  (setq org-plantuml-jar-path
        (expand-file-name "~/bin/plantuml.jar"))
  (setq org-ditaa-jar-path
        (expand-file-name "~/.emacs.d/bin/ditaa0_9.jar"))
  (setq org-babel-python-command "PYTHONPATH=$PYTHONPATH:~/files/prog python3")
  (setq org-babel-sh-command "bash")
#+END_SRC

#+RESULTS:
: bash

Для заголовков можно указывать параметры через property или elisp.

Например:
\#+PROPERTY: header-args :session *my_python_session*
\#+PROPERTY: header-args+ :results silent
\#+PROPERTY: header-args+ :tangle yes
или
:header-args:SQL:  :cmdline -xxx :engine mysql

#+BEGIN_SRC emacs-lisp
  (setq org-babel-default-header-args:sh
        (cons '(:results . "scalar replace")
              (assq-delete-all :results org-babel-default-header-args)))
#+END_SRC

#+RESULTS:
: ((:results . scalar) (:session . none) (:exports . code) (:cache . no) (:noweb . no) (:hlines . no) (:tangle . no))


*** Время

#+BEGIN_SRC emacs-lisp
(defun bh/is-project-p-with-open-subtasks ()
  "Any task with a todo keyword subtask"
  (let ((has-subtask)
        (subtree-end (save-excursion (org-end-of-subtree t))))
    (save-excursion
      (forward-line 1)
      (while (and (not has-subtask)
                  (< (point) subtree-end)
                  (re-search-forward "^\*+ " subtree-end t))
        (when (and
               (member (org-get-todo-state) org-todo-keywords-1)
               (not (member (org-get-todo-state) org-done-keywords)))
          (setq has-subtask t))))
    has-subtask))

(defun bh/clock-in-to-started (kw)
  "Switch task from TODO or NEXT to STARTED when clocking in.
Skips capture tasks and tasks with subtasks"
  (if (and (member (org-get-todo-state) (list "TODO" "NEXT"))
           (not (and (boundp 'org-capture-mode) org-capture-mode))
           (not (bh/is-project-p-with-open-subtasks)))
      "STARTED"))

(setq org-log-done t)
;; Сохраняем историю подсчета времени между сессиями
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
;; Save clock data in the CLOCK drawer and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer "CLOCK")
;; Yes it's long... but more is better ;)
(setq org-clock-history-length 28)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change task state to NEXT when clocking in
(setq org-clock-in-switch-to-state (quote bh/clock-in-to-started))
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK" "CLOCK")))
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist (quote history))
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)
(setq org-deadline-warning-days 1)
#+END_SRC

#+RESULTS:
: 1

*** Экспорт

(setq org-export-babel-evaluate nil)

** Почта
Для работы с почтой используется mu4e (http://www.djcbsoftware.nl/code/mu/mu4e/).
mu4e идет в составе индексатора mu, который устанавливается, как системный пакет.
file://~/Dropbox/mu_0.9.15-1_amd64.deb

lisp-файлы подключаются к emacs.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
(require 'mu4e)
#+END_SRC

Почта стягивается со всех аккаунтов в ~/Maildir с помощью offlineimap
и фильтруется imapfilter (общий конфиг для всех аккаунтов)
[[file:~/files/settings/.offlineimaprc::%5Bgeneral%5D]]
Для каждого аккаунта используется конфиг imapfilter.
[[file:~/files/settings/.imapfilter/wolfanio.lua::timeout%20=%20120][wolfanio]]
#TODO в перерыве между фильтрацией и скачиванием нежелательные письма просачиваются 

Возможно, для ускорения следует попробовать серверную обработку
http://kb.4rt.ru/mail/setup.

Запуск mu4e.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-; m") 'mu4e)
#+END_SRC

*** Общие настройки
Команда для скачивания почты.
#+BEGIN_SRC emacs-lisp
(setq mu4e-get-mail-command "offlineimap")
(setq mu4e-update-interval 300)
#+END_SRC

Преобразование html-писем в текст.
#+BEGIN_SRC emacs-lisp
(setq mu4e-html2text-command "html2text -utf8 -width 72")
#+END_SRC

Пароли для отправки почты храняться локально в require ~/.authinfo.
Формат:
machine smtp.gmail.com login EMAIL port 587 password *******

Отправляем почту через smtp, используя tls, без использования очереди.
#+BEGIN_SRC emacs-lisp
  (setq
   message-send-mail-function 'smtpmail-send-it
   smtpmail-stream-type 'starttls
   smtpmail-queue-mail  nil)
#+END_SRC

Новые actions и bookmarks.
#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
'("ViewInBrowser" . mu4e-action-view-in-browser) t)

(add-to-list 'mu4e-headers-actions
'("ViewInBrowser" . mu4e-action-view-in-browser) t)

(add-to-list 'mu4e-bookmarks
'("maildir:/wolfanio/INBOX or maildir:/mirantis/INBOX"  "Inbox"     ?i))
#+END_SRC

Сохранение ссылки на письмо.
#+BEGIN_SRC emacs-lisp
(require 'org-mu4e)
#+END_SRC

Всегда отображаем дату и время в заголовках.

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-fields '(
  (:date . 24)
  (:flags . 6)
  (:mailing-list . 10)
  (:from . 22)
  (:subject)))

(setq mu4e-headers-date-format "%x %T")
#+END_SRC

Скрываем сообщение об индексации.

#+BEGIN_SRC emacs-lisp
(setq mu4e-hide-index-messages t)
#+END_SRC



*** Настройки для accounts.
#+BEGIN_SRC emacs-lisp
  (defvar my-mu4e-account-alist
    '(("wolfanio"
       (mu4e-drafts-folder "/wolfanio/drafts")
       (mu4e-sent-folder   "/wolfanio/sent")
       (mu4e-trash-folder  "/wolfanio/trash")
       (mu4e-refile-folder "/wolfanio/archive")

       (user-mail-address "wolfanio@gmail.com")
       (user-full-name  "Andrey Volkov")
       (mu4e-compose-signature
        (concat
         "С уважением,\n"
         "Андрей Волков.\n\n"
         "mobile: +7(916) 86 88 942\n"
         "skype:  amadev_alt\n"
         "site:   http://amadev.ru/\n"))
       (smtpmail-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-user "wolfanio@gmail.com")
       (smtpmail-smtp-service 587))
      ("mirantis"
       (mu4e-drafts-folder "/mirantis/drafts")
       (mu4e-sent-folder   "/mirantis/sent")
       (mu4e-trash-folder  "/mirantis/trash")
       (mu4e-refile-folder "/mirantis/archive")
       (user-mail-address "avolkov@mirantis.com")
       (user-full-name  "Andrey Volkov")
       (mu4e-compose-signature
        (concat
        "Thanks,\n\n"
        "Andrey Volkov,\n"
        "Software Engineer, Mirantis, Inc."))
       (smtpmail-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-user "avolkov@mirantis.com")
       (smtpmail-smtp-service 587))))

#+END_SRC

#+RESULTS:
: my-mu4e-account-alist

Короткие ссылки для inbox.
#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir-shortcuts
      '(("/wolfanio/INBOX" . ?w)
        ("/mirantis/INBOX" . ?m)))
#+END_SRC

*** Интерактивно выбираем account при создании письма.
#+BEGIN_SRC emacs-lisp
(defun my-mu4e-set-account ()
  "Set the account for composing a message."
  (let* ((account
          (if mu4e-compose-parent-message
              (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                (string-match "/\\(.*?\\)/" maildir)
                (match-string 1 maildir))
            (completing-read (format "Compose with account: (%s) "
                                     (mapconcat #'(lambda (var) (car var))
                                                my-mu4e-account-alist "/"))
                             (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                             nil t nil nil (caar my-mu4e-account-alist))))
         (account-vars (cdr (assoc account my-mu4e-account-alist))))
    (message "account: %s, account-vars: %s" account account-vars)
    (if account-vars
        (mapc #'(lambda (var)
                  (set (car var) (cadr var)))
              account-vars)
      (error "No email account found"))))

(setq mu4e-user-mail-address-list
      (mapcar (lambda (account) (cadr (assq 'user-mail-address account)))
              my-mu4e-account-alist))

(add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
#+END_SRC

*** При архивировании переносим в соответствующую папку, в зависимости от текущего maildir.
#+BEGIN_SRC emacs-lisp
(setq mu4e-refile-folder
      (lambda (msg)
        (let* ((maildir (mu4e-message-field msg :maildir))
               (account (progn (string-match "/\\(.*?\\)/" maildir)
                               (match-string 1 maildir)))
               (refile (cadr (assoc 'mu4e-refile-folder (assoc account my-mu4e-account-alist)))))
          (message "maildir: %s, refile-folder: %s" maildir refile)
          refile)))
#+END_SRC




*** Вложения

Вложения можно добавлять с помощью dired (C-c RET C-a)
#+BEGIN_SRC emacs-lisp
(require 'gnus-dired)
;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
        (when (and (derived-mode-p 'message-mode)
                (null message-sent-message-via))
          (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

#+END_SRC


*** Требования
**** Вся почта собирается в одном месте
**** В inbox попадает, то на что нужно реагировать

** Работа с БД

Соединения описываются в sql-connection-alist.
Имя формируется, как название сервиса, тип (P - бой, l - прочее),
есть ли запись (ro, rw - default) опционально.
Пароль хранится в keepassx под тем же именем.

Для единоразовых подключений можно использовать sql-mysql, sql-postgres.
(require 'sql) нужен, т.к. там определяется sql-connection-alist, а
без определенной переменной add-to-list работать не будет.

#+BEGIN_SRC emacs-lisp
  (require 'sql)

  (add-to-list
   'sql-connection-alist
   '("postgres-l"
     (sql-product 'postgres)
     (sql-server "localhost")
     (sql-user "site")
     (sql-database "site")
     (sql-port 5432)))

  (add-to-list
   'sql-connection-alist
   '("devstack-l"
     (sql-product 'mysql)
     (sql-server "james")
     (sql-user "root")
     (sql-database "nova")
     (sql-port 3306)))
#+END_SRC

Интерактивно выбираем подключение, обновляем пароль в выбранной
структуре через get-pass, также пароль копируется в буфер (для
postgres).

#+BEGIN_SRC emacs-lisp
(defun sql-connect-with-pass (connection)
  (interactive
   (helm-comp-read "Select server: " (mapcar (lambda (item)
                                               (list
                                                (nth 0 item)
                                                (nth 0 item)))
                                             sql-connection-alist)))
  ;; get the sql connection info and product from the sql-connection-alist
  (let* ((connection-info (assoc connection sql-connection-alist))
         (connection-product (nth 1 (nth 1 (assoc 'sql-product connection-info))))
         (sql-password (get-pass connection)))
    (kill-new sql-password)
    ;; delete the connection info from the sql-connection-alist
    (setq sql-connection-alist (assq-delete-all connection sql-connection-alist))
    ;; delete the old password from the connection-info
    (setq connection-info (assq-delete-all 'sql-password connection-info))
    ;; add the password to the connection-info
    (nconc connection-info `((sql-password ,sql-password)))
    ;; add back the connection info to the beginning of sql-connection-alist
    ;; (last used server will appear first for the next prompt)
    (add-to-list 'sql-connection-alist connection-info)
    ;; override the sql-product by the product of this connection
    (setq sql-product connection-product)
    ;; connect
    (sql-connect connection connection)
    ;; (if current-prefix-arg
    ;;         (sql-connect connection connection)
    ;;       (sql-connect connection))
    ))
#+END_SRC

Добавляем перенос строки после ответа, т.к. при запросе из отдельного
буфера может не добавиться. Включается обрезка длинных строк, не
перенос.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c s s") 'sql-set-sqli-buffer)
(global-set-key (kbd "C-c m d") 'sql-connect-with-pass)

(setq sql-mysql-options
      (list "--default-character-set=utf8" "-A"))

(defun sql-add-newline-first (output)
  "Add newline to beginning of OUTPUT for `comint-preoutput-filter-functions'"
  (concat "\n" output))

(defun sqli-add-hooks ()
  "Add hooks to `sql-interactive-mode-hook'."
  (add-hook 'comint-preoutput-filter-functions
            'sql-add-newline-first)
  (toggle-truncate-lines t))

(add-hook 'sql-interactive-mode-hook 'sqli-add-hooks)
#+END_SRC

Сохранение истории таким способом не работает при закрытии буфера,
поэтому нужно сначала убить процесс (TODO при закрытии буфера вызывать
сохранение истории). 
#+BEGIN_SRC emacs-lisp
;; comint-input-ring-size 500
  (defun my-sql-save-history-hook ()
    (let ((lval 'sql-input-ring-file-name)
          (rval 'sql-product))
      (if (symbol-value rval)
          (let ((filename
                 (concat "~/.emacs.d/history.d/"
                         (symbol-name (symbol-value rval))
                         "-history.sql")))
            (set (make-local-variable lval) filename))
        (error
         (format "SQL history will not be saved because %s is nil"
                 (symbol-name rval))))))

  (add-hook 'sql-interactive-mode-hook 'my-sql-save-history-hook)
#+END_SRC

#+RESULTS:
| my-sql-save-history-hook | sqli-add-hooks |

** Программирование
*** Python

**** Просмотр документации
Для поиска документации по используется pylookup,
который индексирует документацию python, и сохраняет индекс локально.

#+BEGIN_SRC emacs-lisp
;; add pylookup to your loadpath, ex) "~/.lisp/addons/pylookup"
(setq pylookup-dir (with-emacs-dir "plugins/pylookup"))
(add-to-list 'load-path pylookup-dir)
;; load pylookup when compile time
(eval-when-compile (require 'pylookup))

;; set executable file ande db file
(setq pylookup-program (concat pylookup-dir "/pylookup.py"))
(setq pylookup-db-file (concat pylookup-dir "/pylookup.db"))

;; to speedup, just load it on demand
(autoload 'pylookup-lookup "pylookup"
  "Lookup SEARCH-TERM in the Python HTML indexes." t)
(autoload 'pylookup-update "pylookup"
  "Run pylookup-update and create the database at `pylookup-db-file'." t)
#+END_SRC

#+RESULTS:

Просмотр документации: pylookup-lookup ищет слово под курсором и
предлагает выбор.  
#+BEGIN_SRC emacs-lisp
  (defun pylookup-view-doc-index ()
    (interactive)
    (browse-url (concat "file://" 
                        pylookup-dir 
                        "/python-2.7.7-docs-html/index.html")))
#+END_SRC

#+RESULTS:
| pylookup-keys | wisent-python-default-setup | er/add-python-mode-expansions | jedi:setup | (lambda nil (local-set-key (kbd C-M-i) (quote jedi-complete)) (local-set-key (kbd C-<tab>) (quote jedi-complete)) (local-set-key (kbd C-c C-d C-d) (quote jedi:show-doc)) (local-set-key (kbd C-c C-d h) (quote pylookup-lookup)) (local-set-key (kbd C-c v) (quote pep8)) (local-set-key (kbd C-c l) (quote pylint)) (local-set-key (kbd C-c d) (quote pep257)) (jedi:setup))  |

**** Display current buffer structure
#+BEGIN_SRC emacs-lisp
(defun occur-python-structure ()
  (interactive)
  (occur "def\\b\\|class\\b\\|=[ ]?lambda"))
#+END_SRC

**** Keys
#+BEGIN_SRC emacs-lisp
  (defun python-keys ()
    (local-unset-key (kbd "C-c C-d"))
    (local-set-key (kbd "C-c C-d h") 'pylookup-lookup)
    (local-set-key (kbd "C-c C-d i") 'pylookup-view-doc-index)
    (local-set-key (kbd "C-c C-d C-d") 'jedi:show-doc)
    (local-set-key (kbd "C-c v") 'pep8)
    (local-set-key (kbd "C-c l") 'pylint)
    (local-set-key (kbd "C-c d") 'pep257)
    (local-set-key (kbd "C-; s") 'occur-python-structure)
    (local-set-key (kbd "C-M-i") 'jedi-complete)
    (local-set-key (kbd "C-<tab>") 'jedi-complete)
    (jedi:setup))

  (add-hook 'python-mode-hook 'python-keys)
#+END_SRC

**** Запуск тестов

#+BEGIN_SRC elisp
  (defun run-test-quick ()
    (interactive)
    (message
     (shell-command-to-string
      (concat "~/prog/ttr/bin/ttr " (what-function '(4))))))

  (defun multiple-replace (replaces string)
    (if (null replaces)
        string
      (let ((replace (first replaces)))
       (multiple-replace
        (rest replaces)
        (replace-regexp-in-string (first replace) (second replace) string)))))

  (defun python-path (file-name function-name)
    (concat (multiple-replace
             `((,(concat (chomp (shell-command-to-string "git rev-parse --show-toplevel")) "/") "")
               ("/" "\.")
               ("\.py$" ""))
             file-name) "." function-name))

  (defun what-function (arg)
    (interactive "P")
    (let ((func (if (eq (car arg) 4)
                    (python-path (buffer-file-name) (which-function))
                  (cadr (split-string (which-function) "\\.")))))
     (kill-new func)
     (message "Copied function name '%s' to the clipboard." func)
     func))

  (defun add-run-test-quick-key ()
    (local-set-key (kbd "C-c C-t C-t") 'run-test-quick))

  (add-hook 'python-mode-hook 'add-run-test-quick-key)
#+END_SRC

#+RESULTS:
: what-function

**** virtualenv

Для удобства работы используется virtualevwrapper for emacs,
порт virtualevwrapper.sh, делает все то же но внутри emacs.
Команды run-python, shell-command, org-evaluate выполняются с учетом
текущей virtualenv

#+BEGIN_SRC emacs-lisp
(require 'virtualenvwrapper)
(venv-initialize-interactive-shells) ;; if you want interactive shell support
(venv-initialize-eshell) ;; if you want eshell support
(setq venv-location "~/m/nova/.tox/")
#+END_SRC

#+RESULTS:
: ~/.ve

*** Lisp

#+BEGIN_SRC emacs-lisp
(setq inferior-lisp-program "sbcl --dynamic-space-size 2048")
(setq slime-net-coding-system 'utf-8-unix)
(setq slime-contribs '(slime-fancy))
#+END_SRC

Включаем paredit для мест, где вводится lisp.

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook #'enable-paredit-mode)
#+END_SRC

#+RESULTS:
| enable-paredit-mode | 

#+BEGIN_SRC emacs-lisp
  (add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
  ;; SLIME’s REPL has the very annoying habit of grabbing DEL
  ;; which interferes with paredit’s normal operation.
  ;; To alleviate this problem use the following code:

  ;; Stop SLIME's REPL from grabbing DEL,
  ;; which is annoying when backspacing over a '('
  (defun override-slime-repl-bindings-with-paredit ()
    (define-key slime-repl-mode-map
      (read-kbd-macro paredit-backward-delete-key) nil))
  (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)

#+END_SRC

#+RESULTS:
| override-slime-repl-bindings-with-paredit | (lambda nil (paredit-mode 1)) | slime-trace-dialog-enable | #[nil \301\300!\210\302\303\304\305\306\302$\207 [parse-sexp-lookup-properties make-local-variable t add-hook after-change-functions slime-after-change-function append] 5] | slime-autodoc--on | slime-repl-add-easy-menu |



** Прочее

(load-library "url-handlers")

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/my/"))

  (require 'my_defaults)
  (require 'my_prog)
  (require 'my_python)
  (require 'my_text)
  (require 'my_time)
  (require 'my_calendar)

  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(chess-ics1-black-face ((t (:foreground "dim gray" :weight bold))))
   '(chess-ics1-white-face ((t (:foreground "chocolate" :weight bold))))
   '(secondary-selection ((t (:background "pale goldenrod")))))

  (put 'narrow-to-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

#+END_SRC
** Макросы

#+BEGIN_SRC elisp
(fset 'convert_shell_env_to_emacs
      (lambda (&optional arg)
        "Keyboard macro."
        (interactive "p")
        (kmacro-exec-ring-item
         (quote ([40 4 115 101 116 101 110 118 32 34 4 19 61 return backspace 34 32 34 4 5 34 41 14 1] 0 "%d")) arg)))
#+END_SRC

** Автозапуск
#+BEGIN_SRC emacs-lisp
(find-file "~/org/task.org")
(find-file "~/org/mirantis.org")
(magit-status-internal "~/m/nova")
(start-shells)
#+END_SRC

